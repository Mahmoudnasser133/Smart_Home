
master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001ad6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000001b6  00800060  00001ad6  00001b6a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  00800216  00800216  00001d20  2**0
                  ALLOC
  3 .stab         000006cc  00000000  00000000  00001d20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000085  00000000  00000000  000023ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  00002478  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001cb1  00000000  00000000  00002618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000733  00000000  00000000  000042c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001075  00000000  00000000  000049fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000370  00000000  00000000  00005a74  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004fd  00000000  00000000  00005de4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001d51  00000000  00000000  000062e1  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 62 0c 	jmp	0x18c4	; 0x18c4 <__vector_10>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	12 e0       	ldi	r17, 0x02	; 2
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e6 ed       	ldi	r30, 0xD6	; 214
      68:	fa e1       	ldi	r31, 0x1A	; 26
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a6 31       	cpi	r26, 0x16	; 22
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	12 e0       	ldi	r17, 0x02	; 2
      78:	a6 e1       	ldi	r26, 0x16	; 22
      7a:	b2 e0       	ldi	r27, 0x02	; 2
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 31       	cpi	r26, 0x1A	; 26
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 84 04 	call	0x908	; 0x908 <main>
      8a:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <DIO_vsetPINDir>:

#include <avr/io.h>
#include "std_macros.h"
void DIO_vsetPINDir(unsigned char portname,unsigned char pinnumber,unsigned char direction)
{
	switch(portname)
      92:	82 34       	cpi	r24, 0x42	; 66
      94:	51 f1       	breq	.+84     	; 0xea <DIO_vsetPINDir+0x58>
      96:	83 34       	cpi	r24, 0x43	; 67
      98:	20 f4       	brcc	.+8      	; 0xa2 <DIO_vsetPINDir+0x10>
      9a:	81 34       	cpi	r24, 0x41	; 65
      9c:	09 f0       	breq	.+2      	; 0xa0 <DIO_vsetPINDir+0xe>
      9e:	7b c0       	rjmp	.+246    	; 0x196 <DIO_vsetPINDir+0x104>
      a0:	07 c0       	rjmp	.+14     	; 0xb0 <DIO_vsetPINDir+0x1e>
      a2:	83 34       	cpi	r24, 0x43	; 67
      a4:	09 f4       	brne	.+2      	; 0xa8 <DIO_vsetPINDir+0x16>
      a6:	3e c0       	rjmp	.+124    	; 0x124 <DIO_vsetPINDir+0x92>
      a8:	84 34       	cpi	r24, 0x44	; 68
      aa:	09 f0       	breq	.+2      	; 0xae <DIO_vsetPINDir+0x1c>
      ac:	74 c0       	rjmp	.+232    	; 0x196 <DIO_vsetPINDir+0x104>
      ae:	57 c0       	rjmp	.+174    	; 0x15e <DIO_vsetPINDir+0xcc>
	{
		
		
		case 'A':
		if(direction==1)
      b0:	41 30       	cpi	r20, 0x01	; 1
      b2:	69 f4       	brne	.+26     	; 0xce <DIO_vsetPINDir+0x3c>
		{
			SET_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as output
      b4:	2a b3       	in	r18, 0x1a	; 26
      b6:	81 e0       	ldi	r24, 0x01	; 1
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	ac 01       	movw	r20, r24
      bc:	02 c0       	rjmp	.+4      	; 0xc2 <DIO_vsetPINDir+0x30>
      be:	44 0f       	add	r20, r20
      c0:	55 1f       	adc	r21, r21
      c2:	6a 95       	dec	r22
      c4:	e2 f7       	brpl	.-8      	; 0xbe <DIO_vsetPINDir+0x2c>
      c6:	ba 01       	movw	r22, r20
      c8:	62 2b       	or	r22, r18
      ca:	6a bb       	out	0x1a, r22	; 26
      cc:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRA,pinnumber);//Set the direction of the given pin in port A as input
      ce:	2a b3       	in	r18, 0x1a	; 26
      d0:	81 e0       	ldi	r24, 0x01	; 1
      d2:	90 e0       	ldi	r25, 0x00	; 0
      d4:	ac 01       	movw	r20, r24
      d6:	02 c0       	rjmp	.+4      	; 0xdc <DIO_vsetPINDir+0x4a>
      d8:	44 0f       	add	r20, r20
      da:	55 1f       	adc	r21, r21
      dc:	6a 95       	dec	r22
      de:	e2 f7       	brpl	.-8      	; 0xd8 <DIO_vsetPINDir+0x46>
      e0:	ba 01       	movw	r22, r20
      e2:	60 95       	com	r22
      e4:	62 23       	and	r22, r18
      e6:	6a bb       	out	0x1a, r22	; 26
      e8:	08 95       	ret
		}
		break;
		case 'B':
		if(direction==1)
      ea:	41 30       	cpi	r20, 0x01	; 1
      ec:	69 f4       	brne	.+26     	; 0x108 <DIO_vsetPINDir+0x76>
		{
			SET_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as output
      ee:	27 b3       	in	r18, 0x17	; 23
      f0:	81 e0       	ldi	r24, 0x01	; 1
      f2:	90 e0       	ldi	r25, 0x00	; 0
      f4:	ac 01       	movw	r20, r24
      f6:	02 c0       	rjmp	.+4      	; 0xfc <DIO_vsetPINDir+0x6a>
      f8:	44 0f       	add	r20, r20
      fa:	55 1f       	adc	r21, r21
      fc:	6a 95       	dec	r22
      fe:	e2 f7       	brpl	.-8      	; 0xf8 <DIO_vsetPINDir+0x66>
     100:	ba 01       	movw	r22, r20
     102:	62 2b       	or	r22, r18
     104:	67 bb       	out	0x17, r22	; 23
     106:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRB,pinnumber);//Set the direction of the given pin in port B as input
     108:	27 b3       	in	r18, 0x17	; 23
     10a:	81 e0       	ldi	r24, 0x01	; 1
     10c:	90 e0       	ldi	r25, 0x00	; 0
     10e:	ac 01       	movw	r20, r24
     110:	02 c0       	rjmp	.+4      	; 0x116 <DIO_vsetPINDir+0x84>
     112:	44 0f       	add	r20, r20
     114:	55 1f       	adc	r21, r21
     116:	6a 95       	dec	r22
     118:	e2 f7       	brpl	.-8      	; 0x112 <DIO_vsetPINDir+0x80>
     11a:	ba 01       	movw	r22, r20
     11c:	60 95       	com	r22
     11e:	62 23       	and	r22, r18
     120:	67 bb       	out	0x17, r22	; 23
     122:	08 95       	ret
		}
		break;
		case 'C':
		if(direction==1)
     124:	41 30       	cpi	r20, 0x01	; 1
     126:	69 f4       	brne	.+26     	; 0x142 <DIO_vsetPINDir+0xb0>
		{
			SET_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as output
     128:	24 b3       	in	r18, 0x14	; 20
     12a:	81 e0       	ldi	r24, 0x01	; 1
     12c:	90 e0       	ldi	r25, 0x00	; 0
     12e:	ac 01       	movw	r20, r24
     130:	02 c0       	rjmp	.+4      	; 0x136 <DIO_vsetPINDir+0xa4>
     132:	44 0f       	add	r20, r20
     134:	55 1f       	adc	r21, r21
     136:	6a 95       	dec	r22
     138:	e2 f7       	brpl	.-8      	; 0x132 <DIO_vsetPINDir+0xa0>
     13a:	ba 01       	movw	r22, r20
     13c:	62 2b       	or	r22, r18
     13e:	64 bb       	out	0x14, r22	; 20
     140:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRC,pinnumber);//Set the direction of the given pin in port C as input
     142:	24 b3       	in	r18, 0x14	; 20
     144:	81 e0       	ldi	r24, 0x01	; 1
     146:	90 e0       	ldi	r25, 0x00	; 0
     148:	ac 01       	movw	r20, r24
     14a:	02 c0       	rjmp	.+4      	; 0x150 <DIO_vsetPINDir+0xbe>
     14c:	44 0f       	add	r20, r20
     14e:	55 1f       	adc	r21, r21
     150:	6a 95       	dec	r22
     152:	e2 f7       	brpl	.-8      	; 0x14c <DIO_vsetPINDir+0xba>
     154:	ba 01       	movw	r22, r20
     156:	60 95       	com	r22
     158:	62 23       	and	r22, r18
     15a:	64 bb       	out	0x14, r22	; 20
     15c:	08 95       	ret
		}
		break;
		case 'D':
		if(direction==1)
     15e:	41 30       	cpi	r20, 0x01	; 1
     160:	69 f4       	brne	.+26     	; 0x17c <DIO_vsetPINDir+0xea>
		{
			SET_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as output
     162:	21 b3       	in	r18, 0x11	; 17
     164:	81 e0       	ldi	r24, 0x01	; 1
     166:	90 e0       	ldi	r25, 0x00	; 0
     168:	ac 01       	movw	r20, r24
     16a:	02 c0       	rjmp	.+4      	; 0x170 <DIO_vsetPINDir+0xde>
     16c:	44 0f       	add	r20, r20
     16e:	55 1f       	adc	r21, r21
     170:	6a 95       	dec	r22
     172:	e2 f7       	brpl	.-8      	; 0x16c <DIO_vsetPINDir+0xda>
     174:	ba 01       	movw	r22, r20
     176:	62 2b       	or	r22, r18
     178:	61 bb       	out	0x11, r22	; 17
     17a:	08 95       	ret
		}
		else
		{
			CLR_BIT(DDRD,pinnumber);//Set the direction of the given pin in port D as input
     17c:	21 b3       	in	r18, 0x11	; 17
     17e:	81 e0       	ldi	r24, 0x01	; 1
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	ac 01       	movw	r20, r24
     184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_vsetPINDir+0xf8>
     186:	44 0f       	add	r20, r20
     188:	55 1f       	adc	r21, r21
     18a:	6a 95       	dec	r22
     18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_vsetPINDir+0xf4>
     18e:	ba 01       	movw	r22, r20
     190:	60 95       	com	r22
     192:	62 23       	and	r22, r18
     194:	61 bb       	out	0x11, r22	; 17
     196:	08 95       	ret

00000198 <DIO_write>:
}


void DIO_write(unsigned char portname,unsigned char pinnumber,unsigned char outputvalue)
{
	switch(portname)
     198:	82 34       	cpi	r24, 0x42	; 66
     19a:	51 f1       	breq	.+84     	; 0x1f0 <DIO_write+0x58>
     19c:	83 34       	cpi	r24, 0x43	; 67
     19e:	20 f4       	brcc	.+8      	; 0x1a8 <DIO_write+0x10>
     1a0:	81 34       	cpi	r24, 0x41	; 65
     1a2:	09 f0       	breq	.+2      	; 0x1a6 <DIO_write+0xe>
     1a4:	7b c0       	rjmp	.+246    	; 0x29c <DIO_write+0x104>
     1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <DIO_write+0x1e>
     1a8:	83 34       	cpi	r24, 0x43	; 67
     1aa:	09 f4       	brne	.+2      	; 0x1ae <DIO_write+0x16>
     1ac:	3e c0       	rjmp	.+124    	; 0x22a <DIO_write+0x92>
     1ae:	84 34       	cpi	r24, 0x44	; 68
     1b0:	09 f0       	breq	.+2      	; 0x1b4 <DIO_write+0x1c>
     1b2:	74 c0       	rjmp	.+232    	; 0x29c <DIO_write+0x104>
     1b4:	57 c0       	rjmp	.+174    	; 0x264 <DIO_write+0xcc>
	{
		case 'A' :
		
		if(outputvalue==1)
     1b6:	41 30       	cpi	r20, 0x01	; 1
     1b8:	69 f4       	brne	.+26     	; 0x1d4 <DIO_write+0x3c>
		{
			SET_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as High
     1ba:	2b b3       	in	r18, 0x1b	; 27
     1bc:	81 e0       	ldi	r24, 0x01	; 1
     1be:	90 e0       	ldi	r25, 0x00	; 0
     1c0:	ac 01       	movw	r20, r24
     1c2:	02 c0       	rjmp	.+4      	; 0x1c8 <DIO_write+0x30>
     1c4:	44 0f       	add	r20, r20
     1c6:	55 1f       	adc	r21, r21
     1c8:	6a 95       	dec	r22
     1ca:	e2 f7       	brpl	.-8      	; 0x1c4 <DIO_write+0x2c>
     1cc:	ba 01       	movw	r22, r20
     1ce:	62 2b       	or	r22, r18
     1d0:	6b bb       	out	0x1b, r22	; 27
     1d2:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);//Set the value of the given pin in port A as Low
     1d4:	2b b3       	in	r18, 0x1b	; 27
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	ac 01       	movw	r20, r24
     1dc:	02 c0       	rjmp	.+4      	; 0x1e2 <DIO_write+0x4a>
     1de:	44 0f       	add	r20, r20
     1e0:	55 1f       	adc	r21, r21
     1e2:	6a 95       	dec	r22
     1e4:	e2 f7       	brpl	.-8      	; 0x1de <DIO_write+0x46>
     1e6:	ba 01       	movw	r22, r20
     1e8:	60 95       	com	r22
     1ea:	62 23       	and	r22, r18
     1ec:	6b bb       	out	0x1b, r22	; 27
     1ee:	08 95       	ret
		}
		break ;
		case 'B':
		
		if(outputvalue==1)
     1f0:	41 30       	cpi	r20, 0x01	; 1
     1f2:	69 f4       	brne	.+26     	; 0x20e <DIO_write+0x76>
		{
			SET_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as High
     1f4:	28 b3       	in	r18, 0x18	; 24
     1f6:	81 e0       	ldi	r24, 0x01	; 1
     1f8:	90 e0       	ldi	r25, 0x00	; 0
     1fa:	ac 01       	movw	r20, r24
     1fc:	02 c0       	rjmp	.+4      	; 0x202 <DIO_write+0x6a>
     1fe:	44 0f       	add	r20, r20
     200:	55 1f       	adc	r21, r21
     202:	6a 95       	dec	r22
     204:	e2 f7       	brpl	.-8      	; 0x1fe <DIO_write+0x66>
     206:	ba 01       	movw	r22, r20
     208:	62 2b       	or	r22, r18
     20a:	68 bb       	out	0x18, r22	; 24
     20c:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);//Set the value of the given pin in port B as Low
     20e:	28 b3       	in	r18, 0x18	; 24
     210:	81 e0       	ldi	r24, 0x01	; 1
     212:	90 e0       	ldi	r25, 0x00	; 0
     214:	ac 01       	movw	r20, r24
     216:	02 c0       	rjmp	.+4      	; 0x21c <DIO_write+0x84>
     218:	44 0f       	add	r20, r20
     21a:	55 1f       	adc	r21, r21
     21c:	6a 95       	dec	r22
     21e:	e2 f7       	brpl	.-8      	; 0x218 <DIO_write+0x80>
     220:	ba 01       	movw	r22, r20
     222:	60 95       	com	r22
     224:	62 23       	and	r22, r18
     226:	68 bb       	out	0x18, r22	; 24
     228:	08 95       	ret
		}
		break ;
		case 'C' :
		
		if(outputvalue==1)
     22a:	41 30       	cpi	r20, 0x01	; 1
     22c:	69 f4       	brne	.+26     	; 0x248 <DIO_write+0xb0>
		{
			SET_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as High
     22e:	25 b3       	in	r18, 0x15	; 21
     230:	81 e0       	ldi	r24, 0x01	; 1
     232:	90 e0       	ldi	r25, 0x00	; 0
     234:	ac 01       	movw	r20, r24
     236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_write+0xa4>
     238:	44 0f       	add	r20, r20
     23a:	55 1f       	adc	r21, r21
     23c:	6a 95       	dec	r22
     23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_write+0xa0>
     240:	ba 01       	movw	r22, r20
     242:	62 2b       	or	r22, r18
     244:	65 bb       	out	0x15, r22	; 21
     246:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);//Set the value of the given pin in port C as Low
     248:	25 b3       	in	r18, 0x15	; 21
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	ac 01       	movw	r20, r24
     250:	02 c0       	rjmp	.+4      	; 0x256 <DIO_write+0xbe>
     252:	44 0f       	add	r20, r20
     254:	55 1f       	adc	r21, r21
     256:	6a 95       	dec	r22
     258:	e2 f7       	brpl	.-8      	; 0x252 <DIO_write+0xba>
     25a:	ba 01       	movw	r22, r20
     25c:	60 95       	com	r22
     25e:	62 23       	and	r22, r18
     260:	65 bb       	out	0x15, r22	; 21
     262:	08 95       	ret
		}
		break ;
		case 'D':
		
		if(outputvalue==1)
     264:	41 30       	cpi	r20, 0x01	; 1
     266:	69 f4       	brne	.+26     	; 0x282 <DIO_write+0xea>
		{
			SET_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as High
     268:	22 b3       	in	r18, 0x12	; 18
     26a:	81 e0       	ldi	r24, 0x01	; 1
     26c:	90 e0       	ldi	r25, 0x00	; 0
     26e:	ac 01       	movw	r20, r24
     270:	02 c0       	rjmp	.+4      	; 0x276 <DIO_write+0xde>
     272:	44 0f       	add	r20, r20
     274:	55 1f       	adc	r21, r21
     276:	6a 95       	dec	r22
     278:	e2 f7       	brpl	.-8      	; 0x272 <DIO_write+0xda>
     27a:	ba 01       	movw	r22, r20
     27c:	62 2b       	or	r22, r18
     27e:	62 bb       	out	0x12, r22	; 18
     280:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);//Set the value of the given pin in port D as Low
     282:	22 b3       	in	r18, 0x12	; 18
     284:	81 e0       	ldi	r24, 0x01	; 1
     286:	90 e0       	ldi	r25, 0x00	; 0
     288:	ac 01       	movw	r20, r24
     28a:	02 c0       	rjmp	.+4      	; 0x290 <DIO_write+0xf8>
     28c:	44 0f       	add	r20, r20
     28e:	55 1f       	adc	r21, r21
     290:	6a 95       	dec	r22
     292:	e2 f7       	brpl	.-8      	; 0x28c <DIO_write+0xf4>
     294:	ba 01       	movw	r22, r20
     296:	60 95       	com	r22
     298:	62 23       	and	r22, r18
     29a:	62 bb       	out	0x12, r22	; 18
     29c:	08 95       	ret

0000029e <DIO_u8read>:


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
	switch(portname)
     29e:	82 34       	cpi	r24, 0x42	; 66
     2a0:	f1 f0       	breq	.+60     	; 0x2de <DIO_u8read+0x40>
     2a2:	83 34       	cpi	r24, 0x43	; 67
     2a4:	20 f4       	brcc	.+8      	; 0x2ae <DIO_u8read+0x10>
     2a6:	81 34       	cpi	r24, 0x41	; 65
     2a8:	09 f0       	breq	.+2      	; 0x2ac <DIO_u8read+0xe>
     2aa:	4f c0       	rjmp	.+158    	; 0x34a <DIO_u8read+0xac>
     2ac:	06 c0       	rjmp	.+12     	; 0x2ba <DIO_u8read+0x1c>
     2ae:	83 34       	cpi	r24, 0x43	; 67
     2b0:	41 f1       	breq	.+80     	; 0x302 <DIO_u8read+0x64>
     2b2:	84 34       	cpi	r24, 0x44	; 68
     2b4:	09 f0       	breq	.+2      	; 0x2b8 <DIO_u8read+0x1a>
     2b6:	49 c0       	rjmp	.+146    	; 0x34a <DIO_u8read+0xac>
     2b8:	36 c0       	rjmp	.+108    	; 0x326 <DIO_u8read+0x88>
	{
		case 'A' :
		return_value=READ_BIT(PINA,pinnumber);//Read the value from the given pin in port A
     2ba:	29 b3       	in	r18, 0x19	; 25
     2bc:	81 e0       	ldi	r24, 0x01	; 1
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	06 2e       	mov	r0, r22
     2c2:	02 c0       	rjmp	.+4      	; 0x2c8 <DIO_u8read+0x2a>
     2c4:	88 0f       	add	r24, r24
     2c6:	99 1f       	adc	r25, r25
     2c8:	0a 94       	dec	r0
     2ca:	e2 f7       	brpl	.-8      	; 0x2c4 <DIO_u8read+0x26>
     2cc:	30 e0       	ldi	r19, 0x00	; 0
     2ce:	82 23       	and	r24, r18
     2d0:	93 23       	and	r25, r19
     2d2:	02 c0       	rjmp	.+4      	; 0x2d8 <DIO_u8read+0x3a>
     2d4:	95 95       	asr	r25
     2d6:	87 95       	ror	r24
     2d8:	6a 95       	dec	r22
     2da:	e2 f7       	brpl	.-8      	; 0x2d4 <DIO_u8read+0x36>
		break;
     2dc:	08 95       	ret
		
		case 'B' :
		return_value=READ_BIT(PINB,pinnumber);//Read the value from the given pin in port B
     2de:	26 b3       	in	r18, 0x16	; 22
     2e0:	81 e0       	ldi	r24, 0x01	; 1
     2e2:	90 e0       	ldi	r25, 0x00	; 0
     2e4:	06 2e       	mov	r0, r22
     2e6:	02 c0       	rjmp	.+4      	; 0x2ec <DIO_u8read+0x4e>
     2e8:	88 0f       	add	r24, r24
     2ea:	99 1f       	adc	r25, r25
     2ec:	0a 94       	dec	r0
     2ee:	e2 f7       	brpl	.-8      	; 0x2e8 <DIO_u8read+0x4a>
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	82 23       	and	r24, r18
     2f4:	93 23       	and	r25, r19
     2f6:	02 c0       	rjmp	.+4      	; 0x2fc <DIO_u8read+0x5e>
     2f8:	95 95       	asr	r25
     2fa:	87 95       	ror	r24
     2fc:	6a 95       	dec	r22
     2fe:	e2 f7       	brpl	.-8      	; 0x2f8 <DIO_u8read+0x5a>
		break;
     300:	08 95       	ret
		
		case 'C' :
		return_value=READ_BIT(PINC,pinnumber);//Read the value from the given pin in port C
     302:	23 b3       	in	r18, 0x13	; 19
     304:	81 e0       	ldi	r24, 0x01	; 1
     306:	90 e0       	ldi	r25, 0x00	; 0
     308:	06 2e       	mov	r0, r22
     30a:	02 c0       	rjmp	.+4      	; 0x310 <DIO_u8read+0x72>
     30c:	88 0f       	add	r24, r24
     30e:	99 1f       	adc	r25, r25
     310:	0a 94       	dec	r0
     312:	e2 f7       	brpl	.-8      	; 0x30c <DIO_u8read+0x6e>
     314:	30 e0       	ldi	r19, 0x00	; 0
     316:	82 23       	and	r24, r18
     318:	93 23       	and	r25, r19
     31a:	02 c0       	rjmp	.+4      	; 0x320 <DIO_u8read+0x82>
     31c:	95 95       	asr	r25
     31e:	87 95       	ror	r24
     320:	6a 95       	dec	r22
     322:	e2 f7       	brpl	.-8      	; 0x31c <DIO_u8read+0x7e>
		break;
     324:	08 95       	ret
		
		case 'D' :
		return_value=READ_BIT(PIND,pinnumber);//Read the value from the given pin in port D
     326:	20 b3       	in	r18, 0x10	; 16
     328:	81 e0       	ldi	r24, 0x01	; 1
     32a:	90 e0       	ldi	r25, 0x00	; 0
     32c:	06 2e       	mov	r0, r22
     32e:	02 c0       	rjmp	.+4      	; 0x334 <DIO_u8read+0x96>
     330:	88 0f       	add	r24, r24
     332:	99 1f       	adc	r25, r25
     334:	0a 94       	dec	r0
     336:	e2 f7       	brpl	.-8      	; 0x330 <DIO_u8read+0x92>
     338:	30 e0       	ldi	r19, 0x00	; 0
     33a:	82 23       	and	r24, r18
     33c:	93 23       	and	r25, r19
     33e:	02 c0       	rjmp	.+4      	; 0x344 <DIO_u8read+0xa6>
     340:	95 95       	asr	r25
     342:	87 95       	ror	r24
     344:	6a 95       	dec	r22
     346:	e2 f7       	brpl	.-8      	; 0x340 <DIO_u8read+0xa2>
		break;
     348:	08 95       	ret
}


unsigned char DIO_u8read(unsigned char portname,unsigned char pinnumber)
{
	unsigned char return_value=0;
     34a:	80 e0       	ldi	r24, 0x00	; 0
		break;
		default: 
		break;
	}
	return return_value ;
}
     34c:	08 95       	ret

0000034e <DIO_toggle>:
void DIO_toggle(unsigned char portname,unsigned char pinnumber)
{
	switch(portname)
     34e:	82 34       	cpi	r24, 0x42	; 66
     350:	b9 f0       	breq	.+46     	; 0x380 <DIO_toggle+0x32>
     352:	83 34       	cpi	r24, 0x43	; 67
     354:	18 f4       	brcc	.+6      	; 0x35c <DIO_toggle+0xe>
     356:	81 34       	cpi	r24, 0x41	; 65
     358:	c9 f5       	brne	.+114    	; 0x3cc <DIO_toggle+0x7e>
     35a:	05 c0       	rjmp	.+10     	; 0x366 <DIO_toggle+0x18>
     35c:	83 34       	cpi	r24, 0x43	; 67
     35e:	e9 f0       	breq	.+58     	; 0x39a <DIO_toggle+0x4c>
     360:	84 34       	cpi	r24, 0x44	; 68
     362:	a1 f5       	brne	.+104    	; 0x3cc <DIO_toggle+0x7e>
     364:	27 c0       	rjmp	.+78     	; 0x3b4 <DIO_toggle+0x66>
	{
		case 'A':
		TOG_BIT(PORTA,pinnumber);//Toggle the value of the given pin in port A
     366:	2b b3       	in	r18, 0x1b	; 27
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	90 e0       	ldi	r25, 0x00	; 0
     36c:	ac 01       	movw	r20, r24
     36e:	02 c0       	rjmp	.+4      	; 0x374 <DIO_toggle+0x26>
     370:	44 0f       	add	r20, r20
     372:	55 1f       	adc	r21, r21
     374:	6a 95       	dec	r22
     376:	e2 f7       	brpl	.-8      	; 0x370 <DIO_toggle+0x22>
     378:	ba 01       	movw	r22, r20
     37a:	62 27       	eor	r22, r18
     37c:	6b bb       	out	0x1b, r22	; 27
		break;
     37e:	08 95       	ret
		case 'B':
		TOG_BIT(PORTB,pinnumber);//Toggle the value of the given pin in port B
     380:	28 b3       	in	r18, 0x18	; 24
     382:	81 e0       	ldi	r24, 0x01	; 1
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	ac 01       	movw	r20, r24
     388:	02 c0       	rjmp	.+4      	; 0x38e <DIO_toggle+0x40>
     38a:	44 0f       	add	r20, r20
     38c:	55 1f       	adc	r21, r21
     38e:	6a 95       	dec	r22
     390:	e2 f7       	brpl	.-8      	; 0x38a <DIO_toggle+0x3c>
     392:	ba 01       	movw	r22, r20
     394:	62 27       	eor	r22, r18
     396:	68 bb       	out	0x18, r22	; 24
		break;
     398:	08 95       	ret
		case 'C':
		TOG_BIT(PORTC,pinnumber);//Toggle the value of the given pin in port C
     39a:	25 b3       	in	r18, 0x15	; 21
     39c:	81 e0       	ldi	r24, 0x01	; 1
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	ac 01       	movw	r20, r24
     3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_toggle+0x5a>
     3a4:	44 0f       	add	r20, r20
     3a6:	55 1f       	adc	r21, r21
     3a8:	6a 95       	dec	r22
     3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_toggle+0x56>
     3ac:	ba 01       	movw	r22, r20
     3ae:	62 27       	eor	r22, r18
     3b0:	65 bb       	out	0x15, r22	; 21
		break;
     3b2:	08 95       	ret
		case 'D':
		TOG_BIT(PORTD,pinnumber);//Toggle the value of the given pin in port D
     3b4:	22 b3       	in	r18, 0x12	; 18
     3b6:	81 e0       	ldi	r24, 0x01	; 1
     3b8:	90 e0       	ldi	r25, 0x00	; 0
     3ba:	ac 01       	movw	r20, r24
     3bc:	02 c0       	rjmp	.+4      	; 0x3c2 <DIO_toggle+0x74>
     3be:	44 0f       	add	r20, r20
     3c0:	55 1f       	adc	r21, r21
     3c2:	6a 95       	dec	r22
     3c4:	e2 f7       	brpl	.-8      	; 0x3be <DIO_toggle+0x70>
     3c6:	ba 01       	movw	r22, r20
     3c8:	62 27       	eor	r22, r18
     3ca:	62 bb       	out	0x12, r22	; 18
     3cc:	08 95       	ret

000003ce <DIO_set_port_direction>:
		default: break;
	}
}
void DIO_set_port_direction(unsigned char portname,unsigned char direction)
{
	switch(portname)
     3ce:	82 34       	cpi	r24, 0x42	; 66
     3d0:	61 f0       	breq	.+24     	; 0x3ea <DIO_set_port_direction+0x1c>
     3d2:	83 34       	cpi	r24, 0x43	; 67
     3d4:	18 f4       	brcc	.+6      	; 0x3dc <DIO_set_port_direction+0xe>
     3d6:	81 34       	cpi	r24, 0x41	; 65
     3d8:	69 f4       	brne	.+26     	; 0x3f4 <DIO_set_port_direction+0x26>
     3da:	05 c0       	rjmp	.+10     	; 0x3e6 <DIO_set_port_direction+0x18>
     3dc:	83 34       	cpi	r24, 0x43	; 67
     3de:	39 f0       	breq	.+14     	; 0x3ee <DIO_set_port_direction+0x20>
     3e0:	84 34       	cpi	r24, 0x44	; 68
     3e2:	41 f4       	brne	.+16     	; 0x3f4 <DIO_set_port_direction+0x26>
     3e4:	06 c0       	rjmp	.+12     	; 0x3f2 <DIO_set_port_direction+0x24>
	{
		case 'A' :
		DDRA=direction; //set the direction of port A
     3e6:	6a bb       	out	0x1a, r22	; 26
		break ;
     3e8:	08 95       	ret
		case 'B':
		DDRB=direction; //set the direction of port B
     3ea:	67 bb       	out	0x17, r22	; 23
		break ;
     3ec:	08 95       	ret
		case 'C' :
		DDRC=direction; //set the direction of port C
     3ee:	64 bb       	out	0x14, r22	; 20
		break ;
     3f0:	08 95       	ret
		case 'D':
		DDRD=direction; //set the direction of port D
     3f2:	61 bb       	out	0x11, r22	; 17
     3f4:	08 95       	ret

000003f6 <DIO_write_port>:
	}
	
}
void DIO_write_port(unsigned char portname,unsigned char portvalue)
{
	switch(portname)
     3f6:	82 34       	cpi	r24, 0x42	; 66
     3f8:	61 f0       	breq	.+24     	; 0x412 <DIO_write_port+0x1c>
     3fa:	83 34       	cpi	r24, 0x43	; 67
     3fc:	18 f4       	brcc	.+6      	; 0x404 <DIO_write_port+0xe>
     3fe:	81 34       	cpi	r24, 0x41	; 65
     400:	69 f4       	brne	.+26     	; 0x41c <DIO_write_port+0x26>
     402:	05 c0       	rjmp	.+10     	; 0x40e <DIO_write_port+0x18>
     404:	83 34       	cpi	r24, 0x43	; 67
     406:	39 f0       	breq	.+14     	; 0x416 <DIO_write_port+0x20>
     408:	84 34       	cpi	r24, 0x44	; 68
     40a:	41 f4       	brne	.+16     	; 0x41c <DIO_write_port+0x26>
     40c:	06 c0       	rjmp	.+12     	; 0x41a <DIO_write_port+0x24>
	{
		case 'A' :
		PORTA=portvalue; //Write the given value to the port A
     40e:	6b bb       	out	0x1b, r22	; 27
		break ;
     410:	08 95       	ret
		case 'B':
		PORTB=portvalue; //Write the given value to the port B
     412:	68 bb       	out	0x18, r22	; 24
		break ;
     414:	08 95       	ret
		case 'C' :
		PORTC=portvalue; //Write the given value to the port C
     416:	65 bb       	out	0x15, r22	; 21
		break ;
     418:	08 95       	ret
		case 'D':
		PORTD=portvalue; //Write the given value to the port D
     41a:	62 bb       	out	0x12, r22	; 18
     41c:	08 95       	ret

0000041e <DIO_read_port>:
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
	switch(portname)
     41e:	82 34       	cpi	r24, 0x42	; 66
     420:	61 f0       	breq	.+24     	; 0x43a <DIO_read_port+0x1c>
     422:	83 34       	cpi	r24, 0x43	; 67
     424:	18 f4       	brcc	.+6      	; 0x42c <DIO_read_port+0xe>
     426:	81 34       	cpi	r24, 0x41	; 65
     428:	71 f4       	brne	.+28     	; 0x446 <DIO_read_port+0x28>
     42a:	05 c0       	rjmp	.+10     	; 0x436 <DIO_read_port+0x18>
     42c:	83 34       	cpi	r24, 0x43	; 67
     42e:	39 f0       	breq	.+14     	; 0x43e <DIO_read_port+0x20>
     430:	84 34       	cpi	r24, 0x44	; 68
     432:	49 f4       	brne	.+18     	; 0x446 <DIO_read_port+0x28>
     434:	06 c0       	rjmp	.+12     	; 0x442 <DIO_read_port+0x24>
	{
		case 'A' :
		return_val=PINA; // read the value of port A 
     436:	89 b3       	in	r24, 0x19	; 25
		break ;
     438:	08 95       	ret
		case 'B':
		return_val=PINB; // read the value of port B 
     43a:	86 b3       	in	r24, 0x16	; 22
		break ;
     43c:	08 95       	ret
		case 'C' :
		return_val=PINC; // read the value of port C 
     43e:	83 b3       	in	r24, 0x13	; 19
		break ;
     440:	08 95       	ret
		case 'D':
		return_val=PIND; // read the value of port D 
     442:	80 b3       	in	r24, 0x10	; 16
		break ;
     444:	08 95       	ret
	}
}

unsigned char DIO_read_port(unsigned char portname)
{
	unsigned char return_val=0;
     446:	80 e0       	ldi	r24, 0x00	; 0
		break ;
		default:
		break ;
	}
	return return_val;
}
     448:	08 95       	ret

0000044a <DIO_vconnectpullup>:

void DIO_vconnectpullup(char portname ,char pinnumber, char connect_pullup)
{
	switch(portname)
     44a:	82 34       	cpi	r24, 0x42	; 66
     44c:	51 f1       	breq	.+84     	; 0x4a2 <DIO_vconnectpullup+0x58>
     44e:	83 34       	cpi	r24, 0x43	; 67
     450:	20 f4       	brcc	.+8      	; 0x45a <DIO_vconnectpullup+0x10>
     452:	81 34       	cpi	r24, 0x41	; 65
     454:	09 f0       	breq	.+2      	; 0x458 <DIO_vconnectpullup+0xe>
     456:	7b c0       	rjmp	.+246    	; 0x54e <DIO_vconnectpullup+0x104>
     458:	07 c0       	rjmp	.+14     	; 0x468 <DIO_vconnectpullup+0x1e>
     45a:	83 34       	cpi	r24, 0x43	; 67
     45c:	09 f4       	brne	.+2      	; 0x460 <DIO_vconnectpullup+0x16>
     45e:	3e c0       	rjmp	.+124    	; 0x4dc <DIO_vconnectpullup+0x92>
     460:	84 34       	cpi	r24, 0x44	; 68
     462:	09 f0       	breq	.+2      	; 0x466 <DIO_vconnectpullup+0x1c>
     464:	74 c0       	rjmp	.+232    	; 0x54e <DIO_vconnectpullup+0x104>
     466:	57 c0       	rjmp	.+174    	; 0x516 <DIO_vconnectpullup+0xcc>
	{
		case 'A':
		if(connect_pullup==1)
     468:	41 30       	cpi	r20, 0x01	; 1
     46a:	69 f4       	brne	.+26     	; 0x486 <DIO_vconnectpullup+0x3c>
		{
			SET_BIT(PORTA,pinnumber);
     46c:	2b b3       	in	r18, 0x1b	; 27
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	90 e0       	ldi	r25, 0x00	; 0
     472:	ac 01       	movw	r20, r24
     474:	02 c0       	rjmp	.+4      	; 0x47a <DIO_vconnectpullup+0x30>
     476:	44 0f       	add	r20, r20
     478:	55 1f       	adc	r21, r21
     47a:	6a 95       	dec	r22
     47c:	e2 f7       	brpl	.-8      	; 0x476 <DIO_vconnectpullup+0x2c>
     47e:	ba 01       	movw	r22, r20
     480:	62 2b       	or	r22, r18
     482:	6b bb       	out	0x1b, r22	; 27
     484:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTA,pinnumber);
     486:	2b b3       	in	r18, 0x1b	; 27
     488:	81 e0       	ldi	r24, 0x01	; 1
     48a:	90 e0       	ldi	r25, 0x00	; 0
     48c:	ac 01       	movw	r20, r24
     48e:	02 c0       	rjmp	.+4      	; 0x494 <DIO_vconnectpullup+0x4a>
     490:	44 0f       	add	r20, r20
     492:	55 1f       	adc	r21, r21
     494:	6a 95       	dec	r22
     496:	e2 f7       	brpl	.-8      	; 0x490 <DIO_vconnectpullup+0x46>
     498:	ba 01       	movw	r22, r20
     49a:	60 95       	com	r22
     49c:	62 23       	and	r22, r18
     49e:	6b bb       	out	0x1b, r22	; 27
     4a0:	08 95       	ret
		}
		break;
		case 'B':
		if(connect_pullup==1)
     4a2:	41 30       	cpi	r20, 0x01	; 1
     4a4:	69 f4       	brne	.+26     	; 0x4c0 <DIO_vconnectpullup+0x76>
		{
			SET_BIT(PORTB,pinnumber);
     4a6:	28 b3       	in	r18, 0x18	; 24
     4a8:	81 e0       	ldi	r24, 0x01	; 1
     4aa:	90 e0       	ldi	r25, 0x00	; 0
     4ac:	ac 01       	movw	r20, r24
     4ae:	02 c0       	rjmp	.+4      	; 0x4b4 <DIO_vconnectpullup+0x6a>
     4b0:	44 0f       	add	r20, r20
     4b2:	55 1f       	adc	r21, r21
     4b4:	6a 95       	dec	r22
     4b6:	e2 f7       	brpl	.-8      	; 0x4b0 <DIO_vconnectpullup+0x66>
     4b8:	ba 01       	movw	r22, r20
     4ba:	62 2b       	or	r22, r18
     4bc:	68 bb       	out	0x18, r22	; 24
     4be:	08 95       	ret
		}
		else
		{
			CLR_BIT(PORTB,pinnumber);
     4c0:	28 b3       	in	r18, 0x18	; 24
     4c2:	81 e0       	ldi	r24, 0x01	; 1
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	ac 01       	movw	r20, r24
     4c8:	02 c0       	rjmp	.+4      	; 0x4ce <DIO_vconnectpullup+0x84>
     4ca:	44 0f       	add	r20, r20
     4cc:	55 1f       	adc	r21, r21
     4ce:	6a 95       	dec	r22
     4d0:	e2 f7       	brpl	.-8      	; 0x4ca <DIO_vconnectpullup+0x80>
     4d2:	ba 01       	movw	r22, r20
     4d4:	60 95       	com	r22
     4d6:	62 23       	and	r22, r18
     4d8:	68 bb       	out	0x18, r22	; 24
     4da:	08 95       	ret
		}
		break;
		case 'C':
		if(connect_pullup==1)
     4dc:	41 30       	cpi	r20, 0x01	; 1
     4de:	69 f4       	brne	.+26     	; 0x4fa <DIO_vconnectpullup+0xb0>
		{
			SET_BIT(PORTC,pinnumber);
     4e0:	25 b3       	in	r18, 0x15	; 21
     4e2:	81 e0       	ldi	r24, 0x01	; 1
     4e4:	90 e0       	ldi	r25, 0x00	; 0
     4e6:	ac 01       	movw	r20, r24
     4e8:	02 c0       	rjmp	.+4      	; 0x4ee <DIO_vconnectpullup+0xa4>
     4ea:	44 0f       	add	r20, r20
     4ec:	55 1f       	adc	r21, r21
     4ee:	6a 95       	dec	r22
     4f0:	e2 f7       	brpl	.-8      	; 0x4ea <DIO_vconnectpullup+0xa0>
     4f2:	ba 01       	movw	r22, r20
     4f4:	62 2b       	or	r22, r18
     4f6:	65 bb       	out	0x15, r22	; 21
     4f8:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTC,pinnumber);
     4fa:	25 b3       	in	r18, 0x15	; 21
     4fc:	81 e0       	ldi	r24, 0x01	; 1
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	ac 01       	movw	r20, r24
     502:	02 c0       	rjmp	.+4      	; 0x508 <DIO_vconnectpullup+0xbe>
     504:	44 0f       	add	r20, r20
     506:	55 1f       	adc	r21, r21
     508:	6a 95       	dec	r22
     50a:	e2 f7       	brpl	.-8      	; 0x504 <DIO_vconnectpullup+0xba>
     50c:	ba 01       	movw	r22, r20
     50e:	60 95       	com	r22
     510:	62 23       	and	r22, r18
     512:	65 bb       	out	0x15, r22	; 21
     514:	08 95       	ret
		}
		break;
		case 'D':
		if(connect_pullup==1)
     516:	41 30       	cpi	r20, 0x01	; 1
     518:	69 f4       	brne	.+26     	; 0x534 <DIO_vconnectpullup+0xea>
		{
			SET_BIT(PORTD,pinnumber);
     51a:	22 b3       	in	r18, 0x12	; 18
     51c:	81 e0       	ldi	r24, 0x01	; 1
     51e:	90 e0       	ldi	r25, 0x00	; 0
     520:	ac 01       	movw	r20, r24
     522:	02 c0       	rjmp	.+4      	; 0x528 <DIO_vconnectpullup+0xde>
     524:	44 0f       	add	r20, r20
     526:	55 1f       	adc	r21, r21
     528:	6a 95       	dec	r22
     52a:	e2 f7       	brpl	.-8      	; 0x524 <DIO_vconnectpullup+0xda>
     52c:	ba 01       	movw	r22, r20
     52e:	62 2b       	or	r22, r18
     530:	62 bb       	out	0x12, r22	; 18
     532:	08 95       	ret
			
		}
		else
		{
			CLR_BIT(PORTD,pinnumber);
     534:	22 b3       	in	r18, 0x12	; 18
     536:	81 e0       	ldi	r24, 0x01	; 1
     538:	90 e0       	ldi	r25, 0x00	; 0
     53a:	ac 01       	movw	r20, r24
     53c:	02 c0       	rjmp	.+4      	; 0x542 <DIO_vconnectpullup+0xf8>
     53e:	44 0f       	add	r20, r20
     540:	55 1f       	adc	r21, r21
     542:	6a 95       	dec	r22
     544:	e2 f7       	brpl	.-8      	; 0x53e <DIO_vconnectpullup+0xf4>
     546:	ba 01       	movw	r22, r20
     548:	60 95       	com	r22
     54a:	62 23       	and	r22, r18
     54c:	62 bb       	out	0x12, r22	; 18
     54e:	08 95       	ret

00000550 <write_low_nibble>:
	}
}

void write_low_nibble(unsigned char portname,unsigned char value)
{
	value&=0x0f;
     550:	6f 70       	andi	r22, 0x0F	; 15
	switch(portname)
     552:	82 34       	cpi	r24, 0x42	; 66
     554:	81 f0       	breq	.+32     	; 0x576 <write_low_nibble+0x26>
     556:	83 34       	cpi	r24, 0x43	; 67
     558:	18 f4       	brcc	.+6      	; 0x560 <write_low_nibble+0x10>
     55a:	81 34       	cpi	r24, 0x41	; 65
     55c:	f1 f4       	brne	.+60     	; 0x59a <write_low_nibble+0x4a>
     55e:	05 c0       	rjmp	.+10     	; 0x56a <write_low_nibble+0x1a>
     560:	83 34       	cpi	r24, 0x43	; 67
     562:	79 f0       	breq	.+30     	; 0x582 <write_low_nibble+0x32>
     564:	84 34       	cpi	r24, 0x44	; 68
     566:	c9 f4       	brne	.+50     	; 0x59a <write_low_nibble+0x4a>
     568:	12 c0       	rjmp	.+36     	; 0x58e <write_low_nibble+0x3e>
	{
		case 'A':
		PORTA&=0xf0;
     56a:	8b b3       	in	r24, 0x1b	; 27
     56c:	80 7f       	andi	r24, 0xF0	; 240
     56e:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     570:	8b b3       	in	r24, 0x1b	; 27
     572:	86 2b       	or	r24, r22
     574:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0xf0;
     576:	88 b3       	in	r24, 0x18	; 24
     578:	80 7f       	andi	r24, 0xF0	; 240
     57a:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     57c:	88 b3       	in	r24, 0x18	; 24
     57e:	86 2b       	or	r24, r22
     580:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0xf0;
     582:	85 b3       	in	r24, 0x15	; 21
     584:	80 7f       	andi	r24, 0xF0	; 240
     586:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     588:	85 b3       	in	r24, 0x15	; 21
     58a:	86 2b       	or	r24, r22
     58c:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0xf0;
     58e:	82 b3       	in	r24, 0x12	; 18
     590:	80 7f       	andi	r24, 0xF0	; 240
     592:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     594:	82 b3       	in	r24, 0x12	; 18
     596:	68 2b       	or	r22, r24
     598:	62 bb       	out	0x12, r22	; 18
     59a:	08 95       	ret

0000059c <write_high_nibble>:
	}
}

void write_high_nibble(unsigned char portname,unsigned char value)
{
	value<<=4;
     59c:	62 95       	swap	r22
     59e:	60 7f       	andi	r22, 0xF0	; 240
	switch(portname)
     5a0:	82 34       	cpi	r24, 0x42	; 66
     5a2:	81 f0       	breq	.+32     	; 0x5c4 <write_high_nibble+0x28>
     5a4:	83 34       	cpi	r24, 0x43	; 67
     5a6:	18 f4       	brcc	.+6      	; 0x5ae <write_high_nibble+0x12>
     5a8:	81 34       	cpi	r24, 0x41	; 65
     5aa:	f1 f4       	brne	.+60     	; 0x5e8 <write_high_nibble+0x4c>
     5ac:	05 c0       	rjmp	.+10     	; 0x5b8 <write_high_nibble+0x1c>
     5ae:	83 34       	cpi	r24, 0x43	; 67
     5b0:	79 f0       	breq	.+30     	; 0x5d0 <write_high_nibble+0x34>
     5b2:	84 34       	cpi	r24, 0x44	; 68
     5b4:	c9 f4       	brne	.+50     	; 0x5e8 <write_high_nibble+0x4c>
     5b6:	12 c0       	rjmp	.+36     	; 0x5dc <write_high_nibble+0x40>
	{
		case 'A':
		PORTA&=0x0f;
     5b8:	8b b3       	in	r24, 0x1b	; 27
     5ba:	8f 70       	andi	r24, 0x0F	; 15
     5bc:	8b bb       	out	0x1b, r24	; 27
		PORTA|=value;
     5be:	8b b3       	in	r24, 0x1b	; 27
     5c0:	86 2b       	or	r24, r22
     5c2:	8b bb       	out	0x1b, r24	; 27
		case 'B':
		PORTB&=0x0f;
     5c4:	88 b3       	in	r24, 0x18	; 24
     5c6:	8f 70       	andi	r24, 0x0F	; 15
     5c8:	88 bb       	out	0x18, r24	; 24
		PORTB|=value;
     5ca:	88 b3       	in	r24, 0x18	; 24
     5cc:	86 2b       	or	r24, r22
     5ce:	88 bb       	out	0x18, r24	; 24
		case 'C':
		PORTC&=0x0f;
     5d0:	85 b3       	in	r24, 0x15	; 21
     5d2:	8f 70       	andi	r24, 0x0F	; 15
     5d4:	85 bb       	out	0x15, r24	; 21
		PORTC|=value;
     5d6:	85 b3       	in	r24, 0x15	; 21
     5d8:	86 2b       	or	r24, r22
     5da:	85 bb       	out	0x15, r24	; 21
		case 'D':
		PORTD&=0x0f;
     5dc:	82 b3       	in	r24, 0x12	; 18
     5de:	8f 70       	andi	r24, 0x0F	; 15
     5e0:	82 bb       	out	0x12, r24	; 18
		PORTD|=value;
     5e2:	82 b3       	in	r24, 0x12	; 18
     5e4:	68 2b       	or	r22, r24
     5e6:	62 bb       	out	0x12, r22	; 18
     5e8:	08 95       	ret

000005ea <EEPROM_write>:
#include <avr/io.h>
#include "std_macros.h"
void EEPROM_write(unsigned short address, unsigned char data )
{
	/*set up address register*/
	EEARL=(char)address;
     5ea:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     5ec:	9f bb       	out	0x1f, r25	; 31
	/*set up data register*/
	EEDR=data ;
     5ee:	6d bb       	out	0x1d, r22	; 29
	/*write logical one to EEMWE*/
	SET_BIT(EECR,EEMWE);
     5f0:	e2 9a       	sbi	0x1c, 2	; 28
	/*start EEPROM write by setting EEWE*/
	SET_BIT(EECR,EEWE);
     5f2:	e1 9a       	sbi	0x1c, 1	; 28
	/* wait for completion of write operation*/
	while(READ_BIT(EECR,EEWE)==1);
     5f4:	e1 99       	sbic	0x1c, 1	; 28
     5f6:	fe cf       	rjmp	.-4      	; 0x5f4 <EEPROM_write+0xa>
	
}
     5f8:	08 95       	ret

000005fa <EEPROM_read>:
unsigned char EEPROM_read( unsigned short address )
{
	/*set up address register*/
	EEARL=(char)address;
     5fa:	8e bb       	out	0x1e, r24	; 30
	EEARH=(char)(address>>8);
     5fc:	9f bb       	out	0x1f, r25	; 31
	/*start EEPROM read by setting EERE*/
	SET_BIT(EECR,EERE);
     5fe:	e0 9a       	sbi	0x1c, 0	; 28
	/*return data from data register*/
	return EEDR ;
     600:	8d b3       	in	r24, 0x1d	; 29
}
     602:	08 95       	ret

00000604 <keypad_vInit>:
 *  Author: Mohamed Zaghlol
 */ 
 #include "keypad_driver.h"
 void keypad_vInit()
 {
	 DIO_vsetPINDir('D',0,1);
     604:	84 e4       	ldi	r24, 0x44	; 68
     606:	60 e0       	ldi	r22, 0x00	; 0
     608:	41 e0       	ldi	r20, 0x01	; 1
     60a:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',1,1);
     60e:	84 e4       	ldi	r24, 0x44	; 68
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	41 e0       	ldi	r20, 0x01	; 1
     614:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',2,1);
     618:	84 e4       	ldi	r24, 0x44	; 68
     61a:	62 e0       	ldi	r22, 0x02	; 2
     61c:	41 e0       	ldi	r20, 0x01	; 1
     61e:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',3,1);
     622:	84 e4       	ldi	r24, 0x44	; 68
     624:	63 e0       	ldi	r22, 0x03	; 3
     626:	41 e0       	ldi	r20, 0x01	; 1
     628:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',4,0);
     62c:	84 e4       	ldi	r24, 0x44	; 68
     62e:	64 e0       	ldi	r22, 0x04	; 4
     630:	40 e0       	ldi	r20, 0x00	; 0
     632:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',5,0);
     636:	84 e4       	ldi	r24, 0x44	; 68
     638:	65 e0       	ldi	r22, 0x05	; 5
     63a:	40 e0       	ldi	r20, 0x00	; 0
     63c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',6,0);
     640:	84 e4       	ldi	r24, 0x44	; 68
     642:	66 e0       	ldi	r22, 0x06	; 6
     644:	40 e0       	ldi	r20, 0x00	; 0
     646:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vsetPINDir('D',7,0);
     64a:	84 e4       	ldi	r24, 0x44	; 68
     64c:	67 e0       	ldi	r22, 0x07	; 7
     64e:	40 e0       	ldi	r20, 0x00	; 0
     650:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	 DIO_vconnectpullup('D',4,1);
     654:	84 e4       	ldi	r24, 0x44	; 68
     656:	64 e0       	ldi	r22, 0x04	; 4
     658:	41 e0       	ldi	r20, 0x01	; 1
     65a:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',5,1);
     65e:	84 e4       	ldi	r24, 0x44	; 68
     660:	65 e0       	ldi	r22, 0x05	; 5
     662:	41 e0       	ldi	r20, 0x01	; 1
     664:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',6,1);
     668:	84 e4       	ldi	r24, 0x44	; 68
     66a:	66 e0       	ldi	r22, 0x06	; 6
     66c:	41 e0       	ldi	r20, 0x01	; 1
     66e:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	 DIO_vconnectpullup('D',7,1);
     672:	84 e4       	ldi	r24, 0x44	; 68
     674:	67 e0       	ldi	r22, 0x07	; 7
     676:	41 e0       	ldi	r20, 0x01	; 1
     678:	0e 94 25 02 	call	0x44a	; 0x44a <DIO_vconnectpullup>
	  
 }
     67c:	08 95       	ret

0000067e <keypad_u8check_press>:
 char keypad_u8check_press()
 {
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	60 97       	sbiw	r28, 0x10	; 16
     68c:	0f b6       	in	r0, 0x3f	; 63
     68e:	f8 94       	cli
     690:	de bf       	out	0x3e, r29	; 62
     692:	0f be       	out	0x3f, r0	; 63
     694:	cd bf       	out	0x3d, r28	; 61
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
     696:	de 01       	movw	r26, r28
     698:	11 96       	adiw	r26, 0x01	; 1
     69a:	e0 e6       	ldi	r30, 0x60	; 96
     69c:	f0 e0       	ldi	r31, 0x00	; 0
     69e:	80 e1       	ldi	r24, 0x10	; 16
     6a0:	01 90       	ld	r0, Z+
     6a2:	0d 92       	st	X+, r0
     6a4:	81 50       	subi	r24, 0x01	; 1
     6a6:	e1 f7       	brne	.-8      	; 0x6a0 <keypad_u8check_press+0x22>
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     6a8:	00 e0       	ldi	r16, 0x00	; 0
	 {
	 DIO_write('D',0,1);
     6aa:	84 e4       	ldi	r24, 0x44	; 68
     6ac:	60 e0       	ldi	r22, 0x00	; 0
     6ae:	41 e0       	ldi	r20, 0x01	; 1
     6b0:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	 DIO_write('D',1,1);
     6b4:	84 e4       	ldi	r24, 0x44	; 68
     6b6:	61 e0       	ldi	r22, 0x01	; 1
     6b8:	41 e0       	ldi	r20, 0x01	; 1
     6ba:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	 DIO_write('D',2,1);
     6be:	84 e4       	ldi	r24, 0x44	; 68
     6c0:	62 e0       	ldi	r22, 0x02	; 2
     6c2:	41 e0       	ldi	r20, 0x01	; 1
     6c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	 DIO_write('D',3,1);
     6c8:	84 e4       	ldi	r24, 0x44	; 68
     6ca:	63 e0       	ldi	r22, 0x03	; 3
     6cc:	41 e0       	ldi	r20, 0x01	; 1
     6ce:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	 DIO_write('D',row,0);
     6d2:	84 e4       	ldi	r24, 0x44	; 68
     6d4:	60 2f       	mov	r22, r16
     6d6:	40 e0       	ldi	r20, 0x00	; 0
     6d8:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	
		for(coloumn=0;coloumn<4;coloumn++)
     6dc:	10 e0       	ldi	r17, 0x00	; 0
	 DIO_vconnectpullup('D',5,1);
	 DIO_vconnectpullup('D',6,1);
	 DIO_vconnectpullup('D',7,1);
	  
 }
 char keypad_u8check_press()
     6de:	61 2f       	mov	r22, r17
     6e0:	6c 5f       	subi	r22, 0xFC	; 252
	 DIO_write('D',3,1);
	 DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
		{
		 x=DIO_u8read('D',(coloumn+4));
     6e2:	84 e4       	ldi	r24, 0x44	; 68
     6e4:	0e 94 4f 01 	call	0x29e	; 0x29e <DIO_u8read>
		 if(x==0)
     6e8:	88 23       	and	r24, r24
     6ea:	61 f4       	brne	.+24     	; 0x704 <keypad_u8check_press+0x86>
			 {
			 returnval=arr[row][coloumn];
     6ec:	e0 2f       	mov	r30, r16
     6ee:	f0 e0       	ldi	r31, 0x00	; 0
     6f0:	ee 0f       	add	r30, r30
     6f2:	ff 1f       	adc	r31, r31
     6f4:	ee 0f       	add	r30, r30
     6f6:	ff 1f       	adc	r31, r31
     6f8:	e1 0f       	add	r30, r17
     6fa:	f1 1d       	adc	r31, r1
     6fc:	ec 0f       	add	r30, r28
     6fe:	fd 1f       	adc	r31, r29
     700:	81 81       	ldd	r24, Z+1	; 0x01
     702:	04 c0       	rjmp	.+8      	; 0x70c <keypad_u8check_press+0x8e>
	 DIO_write('D',1,1);
	 DIO_write('D',2,1);
	 DIO_write('D',3,1);
	 DIO_write('D',row,0);
	
		for(coloumn=0;coloumn<4;coloumn++)
     704:	1f 5f       	subi	r17, 0xFF	; 255
     706:	14 30       	cpi	r17, 0x04	; 4
     708:	51 f7       	brne	.-44     	; 0x6de <keypad_u8check_press+0x60>
     70a:	0b c0       	rjmp	.+22     	; 0x722 <keypad_u8check_press+0xa4>
		{
		 break;
		}
	 }	 
	 return returnval ;	 
     70c:	60 96       	adiw	r28, 0x10	; 16
     70e:	0f b6       	in	r0, 0x3f	; 63
     710:	f8 94       	cli
     712:	de bf       	out	0x3e, r29	; 62
     714:	0f be       	out	0x3f, r0	; 63
     716:	cd bf       	out	0x3d, r28	; 61
     718:	df 91       	pop	r29
     71a:	cf 91       	pop	r28
     71c:	1f 91       	pop	r17
     71e:	0f 91       	pop	r16
     720:	08 95       	ret
 char keypad_u8check_press()
 {
	 char arr[4][4]={{'7','8','9','/'},{'4','5','6','*'},{'1','2','3','-'},{'A','0','=','+'}};
	 char row,coloumn,x;
	 char returnval=NOTPRESSED;
	 for(row=0;row<4;row++)
     722:	0f 5f       	subi	r16, 0xFF	; 255
     724:	04 30       	cpi	r16, 0x04	; 4
     726:	09 f6       	brne	.-126    	; 0x6aa <keypad_u8check_press+0x2c>
     728:	8f ef       	ldi	r24, 0xFF	; 255
     72a:	f0 cf       	rjmp	.-32     	; 0x70c <keypad_u8check_press+0x8e>

0000072c <send_falling_edge>:
}


static void send_falling_edge(void)
{
	DIO_write('B',EN,1);
     72c:	82 e4       	ldi	r24, 0x42	; 66
     72e:	60 e0       	ldi	r22, 0x00	; 0
     730:	41 e0       	ldi	r20, 0x01	; 1
     732:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     736:	8f e9       	ldi	r24, 0x9F	; 159
     738:	9f e0       	ldi	r25, 0x0F	; 15
     73a:	01 97       	sbiw	r24, 0x01	; 1
     73c:	f1 f7       	brne	.-4      	; 0x73a <send_falling_edge+0xe>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <send_falling_edge+0x14>
     740:	00 00       	nop
	_delay_ms(2);
	DIO_write('B',EN,0);
     742:	82 e4       	ldi	r24, 0x42	; 66
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	40 e0       	ldi	r20, 0x00	; 0
     748:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
     74c:	8f e9       	ldi	r24, 0x9F	; 159
     74e:	9f e0       	ldi	r25, 0x0F	; 15
     750:	01 97       	sbiw	r24, 0x01	; 1
     752:	f1 f7       	brne	.-4      	; 0x750 <send_falling_edge+0x24>
     754:	00 c0       	rjmp	.+0      	; 0x756 <send_falling_edge+0x2a>
     756:	00 00       	nop
	_delay_ms(2);
}
     758:	08 95       	ret

0000075a <LCD_vSend_cmd>:
void LCD_vSend_cmd(char cmd)
{
     75a:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',cmd);
     75c:	81 e4       	ldi	r24, 0x41	; 65
     75e:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write('B',RS,0);
     762:	82 e4       	ldi	r24, 0x42	; 66
     764:	61 e0       	ldi	r22, 0x01	; 1
     766:	40 e0       	ldi	r20, 0x00	; 0
     768:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     76c:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge>
     770:	8f ec       	ldi	r24, 0xCF	; 207
     772:	97 e0       	ldi	r25, 0x07	; 7
     774:	01 97       	sbiw	r24, 0x01	; 1
     776:	f1 f7       	brne	.-4      	; 0x774 <LCD_vSend_cmd+0x1a>
     778:	00 c0       	rjmp	.+0      	; 0x77a <LCD_vSend_cmd+0x20>
     77a:	00 00       	nop
	write_high_nibble('A',cmd);
	DIO_write('B',RS,0);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
     77c:	08 95       	ret

0000077e <LCD_vInit>:
     77e:	8f ef       	ldi	r24, 0xFF	; 255
     780:	91 ee       	ldi	r25, 0xE1	; 225
     782:	a4 e0       	ldi	r26, 0x04	; 4
     784:	81 50       	subi	r24, 0x01	; 1
     786:	90 40       	sbci	r25, 0x00	; 0
     788:	a0 40       	sbci	r26, 0x00	; 0
     78a:	e1 f7       	brne	.-8      	; 0x784 <LCD_vInit+0x6>
     78c:	00 c0       	rjmp	.+0      	; 0x78e <LCD_vInit+0x10>
     78e:	00 00       	nop

void LCD_vInit(void)
{
	_delay_ms(200);
	#if defined eight_bits_mode
	DIO_vsetPINDir('A',0,1);
     790:	81 e4       	ldi	r24, 0x41	; 65
     792:	60 e0       	ldi	r22, 0x00	; 0
     794:	41 e0       	ldi	r20, 0x01	; 1
     796:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',1,1);
     79a:	81 e4       	ldi	r24, 0x41	; 65
     79c:	61 e0       	ldi	r22, 0x01	; 1
     79e:	41 e0       	ldi	r20, 0x01	; 1
     7a0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',2,1);
     7a4:	81 e4       	ldi	r24, 0x41	; 65
     7a6:	62 e0       	ldi	r22, 0x02	; 2
     7a8:	41 e0       	ldi	r20, 0x01	; 1
     7aa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',3,1);
     7ae:	81 e4       	ldi	r24, 0x41	; 65
     7b0:	63 e0       	ldi	r22, 0x03	; 3
     7b2:	41 e0       	ldi	r20, 0x01	; 1
     7b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',4,1);
     7b8:	81 e4       	ldi	r24, 0x41	; 65
     7ba:	64 e0       	ldi	r22, 0x04	; 4
     7bc:	41 e0       	ldi	r20, 0x01	; 1
     7be:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',5,1);
     7c2:	81 e4       	ldi	r24, 0x41	; 65
     7c4:	65 e0       	ldi	r22, 0x05	; 5
     7c6:	41 e0       	ldi	r20, 0x01	; 1
     7c8:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',6,1);
     7cc:	81 e4       	ldi	r24, 0x41	; 65
     7ce:	66 e0       	ldi	r22, 0x06	; 6
     7d0:	41 e0       	ldi	r20, 0x01	; 1
     7d2:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('A',7,1);
     7d6:	81 e4       	ldi	r24, 0x41	; 65
     7d8:	67 e0       	ldi	r22, 0x07	; 7
     7da:	41 e0       	ldi	r20, 0x01	; 1
     7dc:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',EN,1);
     7e0:	82 e4       	ldi	r24, 0x42	; 66
     7e2:	60 e0       	ldi	r22, 0x00	; 0
     7e4:	41 e0       	ldi	r20, 0x01	; 1
     7e6:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RW,1);
     7ea:	82 e4       	ldi	r24, 0x42	; 66
     7ec:	62 e0       	ldi	r22, 0x02	; 2
     7ee:	41 e0       	ldi	r20, 0x01	; 1
     7f0:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',RS,1);
     7f4:	82 e4       	ldi	r24, 0x42	; 66
     7f6:	61 e0       	ldi	r22, 0x01	; 1
     7f8:	41 e0       	ldi	r20, 0x01	; 1
     7fa:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_write('B',RW,0);
     7fe:	82 e4       	ldi	r24, 0x42	; 66
     800:	62 e0       	ldi	r22, 0x02	; 2
     802:	40 e0       	ldi	r20, 0x00	; 0
     804:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	LCD_vSend_cmd(EIGHT_BITS); //8 bit mode
     808:	88 e3       	ldi	r24, 0x38	; 56
     80a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     80e:	af ec       	ldi	r26, 0xCF	; 207
     810:	b7 e0       	ldi	r27, 0x07	; 7
     812:	11 97       	sbiw	r26, 0x01	; 1
     814:	f1 f7       	brne	.-4      	; 0x812 <LCD_vInit+0x94>
     816:	00 c0       	rjmp	.+0      	; 0x818 <LCD_vInit+0x9a>
     818:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CURSOR_ON_DISPLAN_ON);//display on cursor on
     81a:	8e e0       	ldi	r24, 0x0E	; 14
     81c:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     820:	8f ec       	ldi	r24, 0xCF	; 207
     822:	97 e0       	ldi	r25, 0x07	; 7
     824:	01 97       	sbiw	r24, 0x01	; 1
     826:	f1 f7       	brne	.-4      	; 0x824 <LCD_vInit+0xa6>
     828:	00 c0       	rjmp	.+0      	; 0x82a <LCD_vInit+0xac>
     82a:	00 00       	nop
	_delay_ms(1);
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
     82c:	81 e0       	ldi	r24, 0x01	; 1
     82e:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     832:	af e1       	ldi	r26, 0x1F	; 31
     834:	be e4       	ldi	r27, 0x4E	; 78
     836:	11 97       	sbiw	r26, 0x01	; 1
     838:	f1 f7       	brne	.-4      	; 0x836 <LCD_vInit+0xb8>
     83a:	00 c0       	rjmp	.+0      	; 0x83c <LCD_vInit+0xbe>
     83c:	00 00       	nop
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
     83e:	86 e0       	ldi	r24, 0x06	; 6
     840:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     844:	8f ec       	ldi	r24, 0xCF	; 207
     846:	97 e0       	ldi	r25, 0x07	; 7
     848:	01 97       	sbiw	r24, 0x01	; 1
     84a:	f1 f7       	brne	.-4      	; 0x848 <LCD_vInit+0xca>
     84c:	00 c0       	rjmp	.+0      	; 0x84e <LCD_vInit+0xd0>
     84e:	00 00       	nop
	LCD_vSend_cmd(CLR_SCREEN);//clear the screen
	_delay_ms(10);
	LCD_vSend_cmd(ENTRY_MODE); //entry mode
	_delay_ms(1);
	#endif
}
     850:	08 95       	ret

00000852 <LCD_vSend_char>:
	#endif
	_delay_ms(1);
}

void LCD_vSend_char(char data)
{
     852:	68 2f       	mov	r22, r24
	#if defined eight_bits_mode
	DIO_write_port('A',data);
     854:	81 e4       	ldi	r24, 0x41	; 65
     856:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <DIO_write_port>
	DIO_write('B',RS,1);
     85a:	82 e4       	ldi	r24, 0x42	; 66
     85c:	61 e0       	ldi	r22, 0x01	; 1
     85e:	41 e0       	ldi	r20, 0x01	; 1
     860:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	send_falling_edge();
     864:	0e 94 96 03 	call	0x72c	; 0x72c <send_falling_edge>
     868:	8f ec       	ldi	r24, 0xCF	; 207
     86a:	97 e0       	ldi	r25, 0x07	; 7
     86c:	01 97       	sbiw	r24, 0x01	; 1
     86e:	f1 f7       	brne	.-4      	; 0x86c <__stack+0xd>
     870:	00 c0       	rjmp	.+0      	; 0x872 <__stack+0x13>
     872:	00 00       	nop
	write_high_nibble('A',data);
	DIO_write('B',RS,1);
	send_falling_edge();
	#endif
	_delay_ms(1);
}
     874:	08 95       	ret

00000876 <LCD_vSend_string>:


void LCD_vSend_string(char *data)
{
     876:	cf 93       	push	r28
     878:	df 93       	push	r29
     87a:	ec 01       	movw	r28, r24
	while((*data)!='\0')
     87c:	88 81       	ld	r24, Y
     87e:	88 23       	and	r24, r24
     880:	31 f0       	breq	.+12     	; 0x88e <LCD_vSend_string+0x18>
	#endif
	_delay_ms(1);
}


void LCD_vSend_string(char *data)
     882:	21 96       	adiw	r28, 0x01	; 1
{
	while((*data)!='\0')
	{
		LCD_vSend_char(*data);
     884:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
}


void LCD_vSend_string(char *data)
{
	while((*data)!='\0')
     888:	89 91       	ld	r24, Y+
     88a:	88 23       	and	r24, r24
     88c:	d9 f7       	brne	.-10     	; 0x884 <LCD_vSend_string+0xe>
	{
		LCD_vSend_char(*data);
		data++;
	}
}
     88e:	df 91       	pop	r29
     890:	cf 91       	pop	r28
     892:	08 95       	ret

00000894 <LCD_clearscreen>:
void LCD_clearscreen()
{
	LCD_vSend_cmd(CLR_SCREEN);
     894:	81 e0       	ldi	r24, 0x01	; 1
     896:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     89a:	8f e1       	ldi	r24, 0x1F	; 31
     89c:	9e e4       	ldi	r25, 0x4E	; 78
     89e:	01 97       	sbiw	r24, 0x01	; 1
     8a0:	f1 f7       	brne	.-4      	; 0x89e <LCD_clearscreen+0xa>
     8a2:	00 c0       	rjmp	.+0      	; 0x8a4 <LCD_clearscreen+0x10>
     8a4:	00 00       	nop
	_delay_ms(10);
}
     8a6:	08 95       	ret

000008a8 <LCD_movecursor>:
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
     8a8:	28 2f       	mov	r18, r24
     8aa:	21 50       	subi	r18, 0x01	; 1
     8ac:	22 30       	cpi	r18, 0x02	; 2
     8ae:	70 f4       	brcc	.+28     	; 0x8cc <LCD_movecursor+0x24>
     8b0:	61 31       	cpi	r22, 0x11	; 17
     8b2:	70 f4       	brcc	.+28     	; 0x8d0 <LCD_movecursor+0x28>
     8b4:	66 23       	and	r22, r22
     8b6:	71 f0       	breq	.+28     	; 0x8d4 <LCD_movecursor+0x2c>
	{
		data=0x80;
	}
	else if(row==1)
     8b8:	81 30       	cpi	r24, 0x01	; 1
     8ba:	19 f4       	brne	.+6      	; 0x8c2 <LCD_movecursor+0x1a>
	{
		data=0x80+coloumn-1 ;
     8bc:	96 2f       	mov	r25, r22
     8be:	91 58       	subi	r25, 0x81	; 129
     8c0:	0a c0       	rjmp	.+20     	; 0x8d6 <LCD_movecursor+0x2e>
	}
	else if (row==2)
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	41 f4       	brne	.+16     	; 0x8d6 <LCD_movecursor+0x2e>
	{
		data=0xc0+coloumn-1;
     8c6:	96 2f       	mov	r25, r22
     8c8:	91 54       	subi	r25, 0x41	; 65
     8ca:	05 c0       	rjmp	.+10     	; 0x8d6 <LCD_movecursor+0x2e>
void LCD_movecursor(char row,char coloumn)
{
	char data ;
	if(row>2||row<1||coloumn>16||coloumn<1)
	{
		data=0x80;
     8cc:	90 e8       	ldi	r25, 0x80	; 128
     8ce:	03 c0       	rjmp	.+6      	; 0x8d6 <LCD_movecursor+0x2e>
     8d0:	90 e8       	ldi	r25, 0x80	; 128
     8d2:	01 c0       	rjmp	.+2      	; 0x8d6 <LCD_movecursor+0x2e>
     8d4:	90 e8       	ldi	r25, 0x80	; 128
	}
	else if (row==2)
	{
		data=0xc0+coloumn-1;
	}
	LCD_vSend_cmd(data);
     8d6:	89 2f       	mov	r24, r25
     8d8:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
     8dc:	8f ec       	ldi	r24, 0xCF	; 207
     8de:	97 e0       	ldi	r25, 0x07	; 7
     8e0:	01 97       	sbiw	r24, 0x01	; 1
     8e2:	f1 f7       	brne	.-4      	; 0x8e0 <LCD_movecursor+0x38>
     8e4:	00 c0       	rjmp	.+0      	; 0x8e6 <LCD_movecursor+0x3e>
     8e6:	00 00       	nop
	_delay_ms(1);
}
     8e8:	08 95       	ret

000008ea <LED_vInit>:
*  Author: Mohamed Zaghlol
*/
#include "DIO.h"
void LED_vInit(unsigned char portname,unsigned char pinnumber)
{
	DIO_vsetPINDir(portname,pinnumber,1);//Set the given pin in the given port as an output
     8ea:	41 e0       	ldi	r20, 0x01	; 1
     8ec:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
     8f0:	08 95       	ret

000008f2 <LED_vTurnOn>:
void LED_vTurnOn(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,1);//Set the given pin in the given port to one(on)
     8f2:	41 e0       	ldi	r20, 0x01	; 1
     8f4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
     8f8:	08 95       	ret

000008fa <LED_vTurnOff>:
void LED_vTurnOff(unsigned char portname,unsigned char pinnumber)
{
	DIO_write(portname,pinnumber,0);//Set the given pin in the given port to zero(off)
     8fa:	40 e0       	ldi	r20, 0x00	; 0
     8fc:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
     900:	08 95       	ret

00000902 <LED_vToggle>:
void LED_vToggle(unsigned char portname,unsigned char pinnumber)
{
	DIO_toggle(portname,pinnumber);//Set the given pin in the given port to zero if it is one or set it to one if it is zero
     902:	0e 94 a7 01 	call	0x34e	; 0x34e <DIO_toggle>
}
     906:	08 95       	ret

00000908 <main>:

volatile unsigned int count_time=0;
volatile unsigned int count_time_flag=1;
volatile unsigned int count_time_admin=0;
int main(void)
{	
     908:	cf 93       	push	r28
     90a:	df 93       	push	r29
     90c:	cd b7       	in	r28, 0x3d	; 61
     90e:	de b7       	in	r29, 0x3e	; 62
     910:	2b 97       	sbiw	r28, 0x0b	; 11
     912:	0f b6       	in	r0, 0x3f	; 63
     914:	f8 94       	cli
     916:	de bf       	out	0x3e, r29	; 62
     918:	0f be       	out	0x3f, r0	; 63
     91a:	cd bf       	out	0x3d, r28	; 61
unsigned char admin[3]={0xff,0xff,0xff,0xff};
     91c:	de 01       	movw	r26, r28
     91e:	11 96       	adiw	r26, 0x01	; 1
     920:	e1 e1       	ldi	r30, 0x11	; 17
     922:	f2 e0       	ldi	r31, 0x02	; 2
     924:	83 e0       	ldi	r24, 0x03	; 3
     926:	01 90       	ld	r0, Z+
     928:	0d 92       	st	X+, r0
     92a:	81 50       	subi	r24, 0x01	; 1
     92c:	e1 f7       	brne	.-8      	; 0x926 <main+0x1e>
unsigned char guest[3]={0xff,0xff,0xff,0xff};
     92e:	de 01       	movw	r26, r28
     930:	14 96       	adiw	r26, 0x04	; 4
     932:	e1 e1       	ldi	r30, 0x11	; 17
     934:	f2 e0       	ldi	r31, 0x02	; 2
     936:	83 e0       	ldi	r24, 0x03	; 3
     938:	01 90       	ld	r0, Z+
     93a:	0d 92       	st	X+, r0
     93c:	81 50       	subi	r24, 0x01	; 1
     93e:	e1 f7       	brne	.-8      	; 0x938 <main+0x30>
unsigned char temp_sensor=0;
signed char no_try=max_tries;
signed char no_try_ad=max_tries;
signed char block_time=block_time_max;
	
	LCD_vInit();
     940:	0e 94 bf 03 	call	0x77e	; 0x77e <LCD_vInit>
	keypad_vInit();
     944:	0e 94 02 03 	call	0x604	; 0x604 <keypad_vInit>
	SPI_MasterInit();
     948:	0e 94 be 0c 	call	0x197c	; 0x197c <SPI_MasterInit>
	LED_vInit('C',admin_led);
     94c:	83 e4       	ldi	r24, 0x43	; 67
     94e:	60 e0       	ldi	r22, 0x00	; 0
     950:	0e 94 75 04 	call	0x8ea	; 0x8ea <LED_vInit>
	LED_vInit('C',guest_led);
     954:	83 e4       	ldi	r24, 0x43	; 67
     956:	61 e0       	ldi	r22, 0x01	; 1
     958:	0e 94 75 04 	call	0x8ea	; 0x8ea <LED_vInit>
	LED_vInit('C',block_led);
     95c:	83 e4       	ldi	r24, 0x43	; 67
     95e:	62 e0       	ldi	r22, 0x02	; 2
     960:	0e 94 75 04 	call	0x8ea	; 0x8ea <LED_vInit>
unsigned char temp_1digit=0;
unsigned char temp_2digit=0;
unsigned char temp_set=0;
unsigned char temp_sensor=0;
signed char no_try=max_tries;
signed char no_try_ad=max_tries;
     964:	22 e0       	ldi	r18, 0x02	; 2
     966:	29 87       	std	Y+9, r18	; 0x09
unsigned char guest_mode=0;
unsigned char temp_1digit=0;
unsigned char temp_2digit=0;
unsigned char temp_set=0;
unsigned char temp_sensor=0;
signed char no_try=max_tries;
     968:	32 e0       	ldi	r19, 0x02	; 2
     96a:	38 87       	std	Y+8, r19	; 0x08
				EEPROM_write(block_address_data,block_time);
				LCD_movecursor(2,6);
				LCD_vSend_cmd(0x0c);
				LCD_vSend_char(block_time/10+48);
				LCD_vSend_char(block_time%10+48);
				LCD_vSend_string(" second");
     96c:	41 e8       	ldi	r20, 0x81	; 129
     96e:	50 e0       	ldi	r21, 0x00	; 0
     970:	4a 87       	std	Y+10, r20	; 0x0a
     972:	5b 87       	std	Y+11, r21	; 0x0b
					
					send=7;
					recive=SPI_MasterTransmitchar(send);
				AIR:
					LCD_clearscreen();
					LCD_vSend_string("1:set Air Temp");
     974:	0f 2e       	mov	r0, r31
     976:	fd ec       	ldi	r31, 0xCD	; 205
     978:	8f 2e       	mov	r8, r31
     97a:	f1 e0       	ldi	r31, 0x01	; 1
     97c:	9f 2e       	mov	r9, r31
     97e:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("2:Control 0:RET");
     980:	0f 2e       	mov	r0, r31
     982:	fc ed       	ldi	r31, 0xDC	; 220
     984:	6f 2e       	mov	r6, r31
     986:	f1 e0       	ldi	r31, 0x01	; 1
     988:	7f 2e       	mov	r7, r31
     98a:	f0 2d       	mov	r31, r0

while(1)
{

	/*********************** if still Block time  *****************/ 
	if (EEPROM_read(block_address)==0x00)
     98c:	89 e0       	ldi	r24, 0x09	; 9
     98e:	90 e0       	ldi	r25, 0x00	; 0
     990:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     994:	88 23       	and	r24, r24
     996:	09 f0       	breq	.+2      	; 0x99a <main+0x92>
     998:	56 c0       	rjmp	.+172    	; 0xa46 <main+0x13e>
	  {
			EEPROM_write(block_address,0xff);
     99a:	89 e0       	ldi	r24, 0x09	; 9
     99c:	90 e0       	ldi	r25, 0x00	; 0
     99e:	6f ef       	ldi	r22, 0xFF	; 255
     9a0:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
			LED_vTurnOn('C',block_led);
     9a4:	83 e4       	ldi	r24, 0x43	; 67
     9a6:	62 e0       	ldi	r22, 0x02	; 2
     9a8:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LED_vTurnOn>
	
			timer_CTC_init_interrupt();
     9ac:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <timer_CTC_init_interrupt>
	
			LCD_clearscreen();
     9b0:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("Block Mode");
     9b4:	80 e7       	ldi	r24, 0x70	; 112
     9b6:	90 e0       	ldi	r25, 0x00	; 0
     9b8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
 			LCD_movecursor(2,1);
     9bc:	82 e0       	ldi	r24, 0x02	; 2
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("Wait ");
     9c4:	8b e7       	ldi	r24, 0x7B	; 123
     9c6:	90 e0       	ldi	r25, 0x00	; 0
     9c8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			block_time=EEPROM_read(block_address_data);
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	90 e0       	ldi	r25, 0x00	; 0
     9d0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     9d4:	18 2f       	mov	r17, r24
			while (block_time>0)
			{
				EEPROM_write(block_address_data,block_time);
				LCD_movecursor(2,6);
				LCD_vSend_cmd(0x0c);
				LCD_vSend_char(block_time/10+48);
     9d6:	0f 2e       	mov	r0, r31
     9d8:	fa e0       	ldi	r31, 0x0A	; 10
     9da:	ef 2e       	mov	r14, r31
     9dc:	f0 2d       	mov	r31, r0
			LCD_clearscreen();
			LCD_vSend_string("Block Mode");
 			LCD_movecursor(2,1);
			LCD_vSend_string("Wait ");
			block_time=EEPROM_read(block_address_data);
			while (block_time>0)
     9de:	2d c0       	rjmp	.+90     	; 0xa3a <main+0x132>
			{
				EEPROM_write(block_address_data,block_time);
				LCD_movecursor(2,6);
				LCD_vSend_cmd(0x0c);
				LCD_vSend_char(block_time/10+48);
     9e0:	81 2f       	mov	r24, r17
     9e2:	6e 2d       	mov	r22, r14
     9e4:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodqi4>
     9e8:	08 2f       	mov	r16, r24
     9ea:	00 5d       	subi	r16, 0xD0	; 208
				LCD_vSend_char(block_time%10+48);
     9ec:	0f 2e       	mov	r0, r31
     9ee:	f0 e3       	ldi	r31, 0x30	; 48
     9f0:	ff 2e       	mov	r15, r31
     9f2:	f0 2d       	mov	r31, r0
     9f4:	f9 0e       	add	r15, r25
 			LCD_movecursor(2,1);
			LCD_vSend_string("Wait ");
			block_time=EEPROM_read(block_address_data);
			while (block_time>0)
			{
				EEPROM_write(block_address_data,block_time);
     9f6:	80 e1       	ldi	r24, 0x10	; 16
     9f8:	90 e0       	ldi	r25, 0x00	; 0
     9fa:	61 2f       	mov	r22, r17
     9fc:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
				LCD_movecursor(2,6);
     a00:	82 e0       	ldi	r24, 0x02	; 2
     a02:	66 e0       	ldi	r22, 0x06	; 6
     a04:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_cmd(0x0c);
     a08:	8c e0       	ldi	r24, 0x0C	; 12
     a0a:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
				LCD_vSend_char(block_time/10+48);
     a0e:	80 2f       	mov	r24, r16
     a10:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
				LCD_vSend_char(block_time%10+48);
     a14:	8f 2d       	mov	r24, r15
     a16:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
				LCD_vSend_string(" second");
     a1a:	8a 85       	ldd	r24, Y+10	; 0x0a
     a1c:	9b 85       	ldd	r25, Y+11	; 0x0b
     a1e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				if (count_time>=100)
     a22:	80 91 18 02 	lds	r24, 0x0218
     a26:	90 91 19 02 	lds	r25, 0x0219
     a2a:	84 36       	cpi	r24, 0x64	; 100
     a2c:	91 05       	cpc	r25, r1
     a2e:	18 f3       	brcs	.-58     	; 0x9f6 <main+0xee>
				{
					block_time--;
     a30:	11 50       	subi	r17, 0x01	; 1
					count_time=0;
     a32:	10 92 19 02 	sts	0x0219, r1
     a36:	10 92 18 02 	sts	0x0218, r1
			LCD_clearscreen();
			LCD_vSend_string("Block Mode");
 			LCD_movecursor(2,1);
			LCD_vSend_string("Wait ");
			block_time=EEPROM_read(block_address_data);
			while (block_time>0)
     a3a:	11 16       	cp	r1, r17
     a3c:	8c f2       	brlt	.-94     	; 0x9e0 <main+0xd8>
				}
		
			}
	
			no_try=max_tries;
			no_try_ad=max_tries;
     a3e:	92 e0       	ldi	r25, 0x02	; 2
     a40:	99 87       	std	Y+9, r25	; 0x09
					count_time=0;
				}
		
			}
	
			no_try=max_tries;
     a42:	a2 e0       	ldi	r26, 0x02	; 2
     a44:	a8 87       	std	Y+8, r26	; 0x08
			no_try_ad=max_tries;
			block_time=block_time_max;
	
	  } 
/******************************** END block time ***********************/
		LCD_clearscreen();
     a46:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
		LCD_movecursor(1,5);
     a4a:	81 e0       	ldi	r24, 0x01	; 1
     a4c:	65 e0       	ldi	r22, 0x05	; 5
     a4e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
		LCD_vSend_string("Hello");
     a52:	89 e8       	ldi	r24, 0x89	; 137
     a54:	90 e0       	ldi	r25, 0x00	; 0
     a56:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
		LCD_movecursor(2,2);
     a5a:	82 e0       	ldi	r24, 0x02	; 2
     a5c:	62 e0       	ldi	r22, 0x02	; 2
     a5e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
		LCD_vSend_string("Welcome Home");
     a62:	8f e8       	ldi	r24, 0x8F	; 143
     a64:	90 e0       	ldi	r25, 0x00	; 0
     a66:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     a6a:	2f ef       	ldi	r18, 0xFF	; 255
     a6c:	34 e3       	ldi	r19, 0x34	; 52
     a6e:	4c e0       	ldi	r20, 0x0C	; 12
     a70:	21 50       	subi	r18, 0x01	; 1
     a72:	30 40       	sbci	r19, 0x00	; 0
     a74:	40 40       	sbci	r20, 0x00	; 0
     a76:	e1 f7       	brne	.-8      	; 0xa70 <main+0x168>
     a78:	00 c0       	rjmp	.+0      	; 0xa7a <main+0x172>
     a7a:	00 00       	nop
		_delay_ms(500);
		LCD_clearscreen();
     a7c:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
		LCD_vSend_cmd(0x0e);
     a80:	8e e0       	ldi	r24, 0x0E	; 14
     a82:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
		
/*****************       login first time   **************************/
	if (EEPROM_read(STATUS_ADDRESS)==0xff) 
     a86:	80 e0       	ldi	r24, 0x00	; 0
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     a8e:	8f 3f       	cpi	r24, 0xFF	; 255
     a90:	09 f0       	breq	.+2      	; 0xa94 <main+0x18c>
     a92:	8b c0       	rjmp	.+278    	; 0xbaa <main+0x2a2>
		{
			LCD_vSend_string("set password");
     a94:	8c e9       	ldi	r24, 0x9C	; 156
     a96:	90 e0       	ldi	r25, 0x00	; 0
     a98:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
     a9c:	82 e0       	ldi	r24, 0x02	; 2
     a9e:	61 e0       	ldi	r22, 0x01	; 1
     aa0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("for Admin :");
     aa4:	89 ea       	ldi	r24, 0xA9	; 169
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     aac:	ee 24       	eor	r14, r14
     aae:	ff 24       	eor	r15, r15
     ab0:	e3 94       	inc	r14
			for (i=0;i<4;i++)
			{
				do
				{
					x=keypad_u8check_press();
     ab2:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     ab6:	18 2f       	mov	r17, r24
				
				} while (x==0xff);
     ab8:	8f 3f       	cpi	r24, 0xFF	; 255
     aba:	d9 f3       	breq	.-10     	; 0xab2 <main+0x1aa>
				LCD_vSend_char(x);
     abc:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     ac0:	8f e7       	ldi	r24, 0x7F	; 127
     ac2:	9a e1       	ldi	r25, 0x1A	; 26
     ac4:	a6 e0       	ldi	r26, 0x06	; 6
     ac6:	81 50       	subi	r24, 0x01	; 1
     ac8:	90 40       	sbci	r25, 0x00	; 0
     aca:	a0 40       	sbci	r26, 0x00	; 0
     acc:	e1 f7       	brne	.-8      	; 0xac6 <main+0x1be>
     ace:	00 c0       	rjmp	.+0      	; 0xad0 <main+0x1c8>
     ad0:	00 00       	nop
#include "LED.h"

volatile unsigned int count_time=0;
volatile unsigned int count_time_flag=1;
volatile unsigned int count_time_admin=0;
int main(void)
     ad2:	6e 2d       	mov	r22, r14
     ad4:	65 5f       	subi	r22, 0xF5	; 245
					x=keypad_u8check_press();
				
				} while (x==0xff);
				LCD_vSend_char(x);
				_delay_ms(250);
				LCD_movecursor(2,12+i);
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_char('*');
     adc:	8a e2       	ldi	r24, 0x2A	; 42
     ade:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
				EEPROM_write(admin_pass_ADDRESS1+i,x);
     ae2:	c7 01       	movw	r24, r14
     ae4:	61 2f       	mov	r22, r17
     ae6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
     aea:	08 94       	sec
     aec:	e1 1c       	adc	r14, r1
     aee:	f1 1c       	adc	r15, r1
	if (EEPROM_read(STATUS_ADDRESS)==0xff) 
		{
			LCD_vSend_string("set password");
			LCD_movecursor(2,1);
			LCD_vSend_string("for Admin :");
			for (i=0;i<4;i++)
     af0:	95 e0       	ldi	r25, 0x05	; 5
     af2:	e9 16       	cp	r14, r25
     af4:	f1 04       	cpc	r15, r1
     af6:	e9 f6       	brne	.-70     	; 0xab2 <main+0x1aa>
				LCD_movecursor(2,12+i);
				LCD_vSend_char('*');
				EEPROM_write(admin_pass_ADDRESS1+i,x);
					
			}
			LCD_clearscreen();
     af8:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("pass saved");
     afc:	85 eb       	ldi	r24, 0xB5	; 181
     afe:	90 e0       	ldi	r25, 0x00	; 0
     b00:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     b04:	2f ef       	ldi	r18, 0xFF	; 255
     b06:	33 ec       	ldi	r19, 0xC3	; 195
     b08:	49 e0       	ldi	r20, 0x09	; 9
     b0a:	21 50       	subi	r18, 0x01	; 1
     b0c:	30 40       	sbci	r19, 0x00	; 0
     b0e:	40 40       	sbci	r20, 0x00	; 0
     b10:	e1 f7       	brne	.-8      	; 0xb0a <main+0x202>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <main+0x20c>
     b14:	00 00       	nop
			_delay_ms(400);
			LCD_clearscreen();
     b16:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("set password");
     b1a:	8c e9       	ldi	r24, 0x9C	; 156
     b1c:	90 e0       	ldi	r25, 0x00	; 0
     b1e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
     b22:	82 e0       	ldi	r24, 0x02	; 2
     b24:	61 e0       	ldi	r22, 0x01	; 1
     b26:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("for Guest :");
     b2a:	80 ec       	ldi	r24, 0xC0	; 192
     b2c:	90 e0       	ldi	r25, 0x00	; 0
     b2e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     b32:	0f 2e       	mov	r0, r31
     b34:	f5 e0       	ldi	r31, 0x05	; 5
     b36:	ef 2e       	mov	r14, r31
     b38:	ff 24       	eor	r15, r15
     b3a:	f0 2d       	mov	r31, r0
			for (i=0;i<4;i++)
			{
				x=0xff;
				do
				{
					x=keypad_u8check_press();
     b3c:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     b40:	18 2f       	mov	r17, r24
				
				} while (x==0xff);
     b42:	8f 3f       	cpi	r24, 0xFF	; 255
     b44:	d9 f3       	breq	.-10     	; 0xb3c <main+0x234>
				LCD_vSend_char(x);
     b46:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     b4a:	8f e7       	ldi	r24, 0x7F	; 127
     b4c:	9a e1       	ldi	r25, 0x1A	; 26
     b4e:	a6 e0       	ldi	r26, 0x06	; 6
     b50:	81 50       	subi	r24, 0x01	; 1
     b52:	90 40       	sbci	r25, 0x00	; 0
     b54:	a0 40       	sbci	r26, 0x00	; 0
     b56:	e1 f7       	brne	.-8      	; 0xb50 <main+0x248>
     b58:	00 c0       	rjmp	.+0      	; 0xb5a <main+0x252>
     b5a:	00 00       	nop
#include "LED.h"

volatile unsigned int count_time=0;
volatile unsigned int count_time_flag=1;
volatile unsigned int count_time_admin=0;
int main(void)
     b5c:	6e 2d       	mov	r22, r14
     b5e:	69 5f       	subi	r22, 0xF9	; 249
					x=keypad_u8check_press();
				
				} while (x==0xff);
				LCD_vSend_char(x);
				_delay_ms(250);
				LCD_movecursor(2,12+i);
     b60:	82 e0       	ldi	r24, 0x02	; 2
     b62:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_char('*');
     b66:	8a e2       	ldi	r24, 0x2A	; 42
     b68:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
				EEPROM_write(guest_pass_ADDRESS1+i,x);
     b6c:	c7 01       	movw	r24, r14
     b6e:	61 2f       	mov	r22, r17
     b70:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
     b74:	08 94       	sec
     b76:	e1 1c       	adc	r14, r1
     b78:	f1 1c       	adc	r15, r1
			_delay_ms(400);
			LCD_clearscreen();
			LCD_vSend_string("set password");
			LCD_movecursor(2,1);
			LCD_vSend_string("for Guest :");
			for (i=0;i<4;i++)
     b7a:	99 e0       	ldi	r25, 0x09	; 9
     b7c:	e9 16       	cp	r14, r25
     b7e:	f1 04       	cpc	r15, r1
     b80:	e9 f6       	brne	.-70     	; 0xb3c <main+0x234>
				LCD_movecursor(2,12+i);
				LCD_vSend_char('*');
				EEPROM_write(guest_pass_ADDRESS1+i,x);
			
			}
		LCD_clearscreen();
     b82:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
		LCD_vSend_string("pass saved");
     b86:	85 eb       	ldi	r24, 0xB5	; 181
     b88:	90 e0       	ldi	r25, 0x00	; 0
     b8a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     b8e:	2f ef       	ldi	r18, 0xFF	; 255
     b90:	33 ec       	ldi	r19, 0xC3	; 195
     b92:	49 e0       	ldi	r20, 0x09	; 9
     b94:	21 50       	subi	r18, 0x01	; 1
     b96:	30 40       	sbci	r19, 0x00	; 0
     b98:	40 40       	sbci	r20, 0x00	; 0
     b9a:	e1 f7       	brne	.-8      	; 0xb94 <main+0x28c>
     b9c:	00 c0       	rjmp	.+0      	; 0xb9e <main+0x296>
     b9e:	00 00       	nop
		_delay_ms(400);
		EEPROM_write(STATUS_ADDRESS,0x01);
     ba0:	80 e0       	ldi	r24, 0x00	; 0
     ba2:	90 e0       	ldi	r25, 0x00	; 0
     ba4:	61 e0       	ldi	r22, 0x01	; 1
     ba6:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
							block_time--;
							count_time=0;
						}
					}
				    LCD_vSend_cmd(0x0e);
					no_try_ad=max_tries;
     baa:	1f 82       	std	Y+7, r1	; 0x07
		
			send='g';
			recive=SPI_MasterTransmitchar(send);
		g_options:
			LCD_clearscreen();
			LCD_vSend_string("1:Room1  2:Room2");
     bac:	0f 2e       	mov	r0, r31
     bae:	f5 e2       	ldi	r31, 0x25	; 37
     bb0:	cf 2e       	mov	r12, r31
     bb2:	f1 e0       	ldi	r31, 0x01	; 1
     bb4:	df 2e       	mov	r13, r31
     bb6:	f0 2d       	mov	r31, r0
			LCD_movecursor(2,1);
			LCD_vSend_string("3:Room3  4:Room4");
     bb8:	0f 2e       	mov	r0, r31
     bba:	f6 e3       	ldi	r31, 0x36	; 54
     bbc:	af 2e       	mov	r10, r31
     bbe:	f1 e0       	ldi	r31, 0x01	; 1
     bc0:	bf 2e       	mov	r11, r31
     bc2:	f0 2d       	mov	r31, r0
	}
/***********************       End log in ****************************/
		
/****************  select mode *****************************************/
 lable1:
	count_time_flag=1;
     bc4:	81 e0       	ldi	r24, 0x01	; 1
     bc6:	90 e0       	ldi	r25, 0x00	; 0
     bc8:	90 93 15 02 	sts	0x0215, r25
     bcc:	80 93 14 02 	sts	0x0214, r24
	if (EEPROM_read(STATUS_ADDRESS)==0x01)
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     bd8:	81 30       	cpi	r24, 0x01	; 1
     bda:	71 f4       	brne	.+28     	; 0xbf8 <main+0x2f0>
		{
			LCD_clearscreen();
     bdc:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("select mode");
     be0:	8c ec       	ldi	r24, 0xCC	; 204
     be2:	90 e0       	ldi	r25, 0x00	; 0
     be4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
     be8:	82 e0       	ldi	r24, 0x02	; 2
     bea:	61 e0       	ldi	r22, 0x01	; 1
     bec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("0:Admin  1:Guest");
     bf0:	88 ed       	ldi	r24, 0xD8	; 216
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
		}
		x=0xff;
		do 
		{
			x=keypad_u8check_press();
     bf8:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
		} while (x==0xff);
     bfc:	8f 3f       	cpi	r24, 0xFF	; 255
     bfe:	e1 f3       	breq	.-8      	; 0xbf8 <main+0x2f0>
     c00:	18 2f       	mov	r17, r24
     c02:	8f e7       	ldi	r24, 0x7F	; 127
     c04:	9a e1       	ldi	r25, 0x1A	; 26
     c06:	a6 e0       	ldi	r26, 0x06	; 6
     c08:	81 50       	subi	r24, 0x01	; 1
     c0a:	90 40       	sbci	r25, 0x00	; 0
     c0c:	a0 40       	sbci	r26, 0x00	; 0
     c0e:	e1 f7       	brne	.-8      	; 0xc08 <main+0x300>
     c10:	00 c0       	rjmp	.+0      	; 0xc12 <main+0x30a>
     c12:	00 00       	nop
		_delay_ms(250);
		LCD_clearscreen();
     c14:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
/*********************  check password for admin  ***********************/
		if (x=='0') 
     c18:	10 33       	cpi	r17, 0x30	; 48
     c1a:	09 f0       	breq	.+2      	; 0xc1e <main+0x316>
     c1c:	e0 c0       	rjmp	.+448    	; 0xdde <main+0x4d6>
		{
			LCD_vSend_string("check pass");
     c1e:	89 ee       	ldi	r24, 0xE9	; 233
     c20:	90 e0       	ldi	r25, 0x00	; 0
     c22:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,12);
     c26:	82 e0       	ldi	r24, 0x02	; 2
     c28:	6c e0       	ldi	r22, 0x0C	; 12
     c2a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
     c2e:	8e 01       	movw	r16, r28
     c30:	0f 5f       	subi	r16, 0xFF	; 255
     c32:	1f 4f       	sbci	r17, 0xFF	; 255
     c34:	0f 2e       	mov	r0, r31
     c36:	fc e0       	ldi	r31, 0x0C	; 12
     c38:	ff 2e       	mov	r15, r31
     c3a:	f0 2d       	mov	r31, r0
		
			for (i=0;i<4;i++)
			{
				do
				{
					admin[i]=keypad_u8check_press();
     c3c:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     c40:	d8 01       	movw	r26, r16
     c42:	8c 93       	st	X, r24
				
				} while (admin[i]==0xff);
     c44:	8f 3f       	cpi	r24, 0xFF	; 255
     c46:	d1 f3       	breq	.-12     	; 0xc3c <main+0x334>
				LCD_vSend_char(admin[i]);
     c48:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     c4c:	2f e7       	ldi	r18, 0x7F	; 127
     c4e:	3a e1       	ldi	r19, 0x1A	; 26
     c50:	46 e0       	ldi	r20, 0x06	; 6
     c52:	21 50       	subi	r18, 0x01	; 1
     c54:	30 40       	sbci	r19, 0x00	; 0
     c56:	40 40       	sbci	r20, 0x00	; 0
     c58:	e1 f7       	brne	.-8      	; 0xc52 <main+0x34a>
     c5a:	00 c0       	rjmp	.+0      	; 0xc5c <main+0x354>
     c5c:	00 00       	nop
				_delay_ms(250);
				LCD_movecursor(2,12+i);
     c5e:	82 e0       	ldi	r24, 0x02	; 2
     c60:	6f 2d       	mov	r22, r15
     c62:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_char('*');
     c66:	8a e2       	ldi	r24, 0x2A	; 42
     c68:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     c6c:	f3 94       	inc	r15
     c6e:	0f 5f       	subi	r16, 0xFF	; 255
     c70:	1f 4f       	sbci	r17, 0xFF	; 255
		if (x=='0') 
		{
			LCD_vSend_string("check pass");
			LCD_movecursor(2,12);
		
			for (i=0;i<4;i++)
     c72:	30 e1       	ldi	r19, 0x10	; 16
     c74:	f3 16       	cp	r15, r19
     c76:	11 f7       	brne	.-60     	; 0xc3c <main+0x334>
				LCD_vSend_char(admin[i]);
				_delay_ms(250);
				LCD_movecursor(2,12+i);
				LCD_vSend_char('*');
			}		
			if (EEPROM_read(admin_pass_ADDRESS1)==admin[0] && EEPROM_read(admin_pass_ADDRESS2)==admin[1] && EEPROM_read(admin_pass_ADDRESS3)==admin[2] && EEPROM_read(admin_pass_ADDRESS4)==admin[3])
     c78:	81 e0       	ldi	r24, 0x01	; 1
     c7a:	90 e0       	ldi	r25, 0x00	; 0
     c7c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     c80:	99 81       	ldd	r25, Y+1	; 0x01
     c82:	89 17       	cp	r24, r25
     c84:	79 f5       	brne	.+94     	; 0xce4 <main+0x3dc>
     c86:	82 e0       	ldi	r24, 0x02	; 2
     c88:	90 e0       	ldi	r25, 0x00	; 0
     c8a:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     c8e:	9a 81       	ldd	r25, Y+2	; 0x02
     c90:	89 17       	cp	r24, r25
     c92:	41 f5       	brne	.+80     	; 0xce4 <main+0x3dc>
     c94:	83 e0       	ldi	r24, 0x03	; 3
     c96:	90 e0       	ldi	r25, 0x00	; 0
     c98:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     c9c:	9b 81       	ldd	r25, Y+3	; 0x03
     c9e:	89 17       	cp	r24, r25
     ca0:	09 f5       	brne	.+66     	; 0xce4 <main+0x3dc>
     ca2:	84 e0       	ldi	r24, 0x04	; 4
     ca4:	90 e0       	ldi	r25, 0x00	; 0
     ca6:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     caa:	9c 81       	ldd	r25, Y+4	; 0x04
     cac:	89 17       	cp	r24, r25
     cae:	d1 f4       	brne	.+52     	; 0xce4 <main+0x3dc>
				{
					
				LCD_clearscreen();
     cb0:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				LCD_vSend_string("correct pass");
     cb4:	84 ef       	ldi	r24, 0xF4	; 244
     cb6:	90 e0       	ldi	r25, 0x00	; 0
     cb8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     cbc:	8f ef       	ldi	r24, 0xFF	; 255
     cbe:	93 ec       	ldi	r25, 0xC3	; 195
     cc0:	a9 e0       	ldi	r26, 0x09	; 9
     cc2:	81 50       	subi	r24, 0x01	; 1
     cc4:	90 40       	sbci	r25, 0x00	; 0
     cc6:	a0 40       	sbci	r26, 0x00	; 0
     cc8:	e1 f7       	brne	.-8      	; 0xcc2 <main+0x3ba>
     cca:	00 c0       	rjmp	.+0      	; 0xccc <main+0x3c4>
     ccc:	00 00       	nop
				_delay_ms(400);
				LED_vTurnOn('C',admin_led);
     cce:	83 e4       	ldi	r24, 0x43	; 67
     cd0:	60 e0       	ldi	r22, 0x00	; 0
     cd2:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LED_vTurnOn>
				admin_mode=1;
				/******** start time out for admin *********/
				timer_CTC_init_interrupt();
     cd6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <timer_CTC_init_interrupt>
			goto lable1;
		}
/*********************** End check ********************/

/*************** guest mode operation **************/
	if (guest_mode==1)
     cda:	9f 81       	ldd	r25, Y+7	; 0x07
     cdc:	91 30       	cpi	r25, 0x01	; 1
     cde:	09 f4       	brne	.+2      	; 0xce2 <main+0x3da>
     ce0:	6f c1       	rjmp	.+734    	; 0xfc0 <main+0x6b8>
     ce2:	f6 c2       	rjmp	.+1516   	; 0x12d0 <main+0x9c8>
					
				}
			
			else
			{
				LCD_clearscreen();
     ce4:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				LCD_vSend_string("wrong pass");
     ce8:	81 e0       	ldi	r24, 0x01	; 1
     cea:	91 e0       	ldi	r25, 0x01	; 1
     cec:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     cf0:	2f ef       	ldi	r18, 0xFF	; 255
     cf2:	31 ee       	ldi	r19, 0xE1	; 225
     cf4:	44 e0       	ldi	r20, 0x04	; 4
     cf6:	21 50       	subi	r18, 0x01	; 1
     cf8:	30 40       	sbci	r19, 0x00	; 0
     cfa:	40 40       	sbci	r20, 0x00	; 0
     cfc:	e1 f7       	brne	.-8      	; 0xcf6 <main+0x3ee>
     cfe:	00 c0       	rjmp	.+0      	; 0xd00 <main+0x3f8>
     d00:	00 00       	nop
				_delay_ms(200);
				if (no_try_ad>0)
     d02:	39 85       	ldd	r19, Y+9	; 0x09
     d04:	13 16       	cp	r1, r19
     d06:	c4 f4       	brge	.+48     	; 0xd38 <main+0x430>
				{
					no_try_ad--;
     d08:	31 50       	subi	r19, 0x01	; 1
     d0a:	39 87       	std	Y+9, r19	; 0x09
					LCD_movecursor(2,1);
     d0c:	82 e0       	ldi	r24, 0x02	; 2
     d0e:	61 e0       	ldi	r22, 0x01	; 1
     d10:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("left tries ");
     d14:	8c e0       	ldi	r24, 0x0C	; 12
     d16:	91 e0       	ldi	r25, 0x01	; 1
     d18:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					LCD_vSend_char(no_try_ad+49);
     d1c:	89 85       	ldd	r24, Y+9	; 0x09
     d1e:	8f 5c       	subi	r24, 0xCF	; 207
     d20:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     d24:	8f ef       	ldi	r24, 0xFF	; 255
     d26:	94 e3       	ldi	r25, 0x34	; 52
     d28:	ac e0       	ldi	r26, 0x0C	; 12
     d2a:	81 50       	subi	r24, 0x01	; 1
     d2c:	90 40       	sbci	r25, 0x00	; 0
     d2e:	a0 40       	sbci	r26, 0x00	; 0
     d30:	e1 f7       	brne	.-8      	; 0xd2a <main+0x422>
     d32:	00 c0       	rjmp	.+0      	; 0xd34 <main+0x42c>
     d34:	00 00       	nop
     d36:	46 cf       	rjmp	.-372    	; 0xbc4 <main+0x2bc>
					_delay_ms(500);
					goto lable1;
				}
				else if(no_try_ad<=0)
				{
					timer_CTC_init_interrupt();
     d38:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <timer_CTC_init_interrupt>
					LCD_clearscreen();
     d3c:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
					LCD_vSend_string("Block Mode");
     d40:	80 e7       	ldi	r24, 0x70	; 112
     d42:	90 e0       	ldi	r25, 0x00	; 0
     d44:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					LCD_movecursor(2,1);
     d48:	82 e0       	ldi	r24, 0x02	; 2
     d4a:	61 e0       	ldi	r22, 0x01	; 1
     d4c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("Wait ");
     d50:	8b e7       	ldi	r24, 0x7B	; 123
     d52:	90 e0       	ldi	r25, 0x00	; 0
     d54:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					EEPROM_write(block_address,0x00);
     d58:	89 e0       	ldi	r24, 0x09	; 9
     d5a:	90 e0       	ldi	r25, 0x00	; 0
     d5c:	60 e0       	ldi	r22, 0x00	; 0
     d5e:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
     d62:	0a e0       	ldi	r16, 0x0A	; 10
					{
						LED_vTurnOn('C',block_led);
						EEPROM_write(block_address_data,block_time);
						LCD_movecursor(2,6);
						LCD_vSend_cmd(0x0c);
						LCD_vSend_char(block_time/10+48);
     d64:	0f 2e       	mov	r0, r31
     d66:	fa e0       	ldi	r31, 0x0A	; 10
     d68:	ff 2e       	mov	r15, r31
     d6a:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("Wait ");
					EEPROM_write(block_address,0x00);
					while (block_time>0)
					{
						LED_vTurnOn('C',block_led);
     d6c:	83 e4       	ldi	r24, 0x43	; 67
     d6e:	62 e0       	ldi	r22, 0x02	; 2
     d70:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LED_vTurnOn>
						EEPROM_write(block_address_data,block_time);
     d74:	80 e1       	ldi	r24, 0x10	; 16
     d76:	90 e0       	ldi	r25, 0x00	; 0
     d78:	60 2f       	mov	r22, r16
     d7a:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						LCD_movecursor(2,6);
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	66 e0       	ldi	r22, 0x06	; 6
     d82:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_cmd(0x0c);
     d86:	8c e0       	ldi	r24, 0x0C	; 12
     d88:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
						LCD_vSend_char(block_time/10+48);
     d8c:	80 2f       	mov	r24, r16
     d8e:	6f 2d       	mov	r22, r15
     d90:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodqi4>
     d94:	19 2f       	mov	r17, r25
     d96:	80 5d       	subi	r24, 0xD0	; 208
     d98:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
						LCD_vSend_char(block_time%10+48);
     d9c:	81 2f       	mov	r24, r17
     d9e:	80 5d       	subi	r24, 0xD0	; 208
     da0:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
						LCD_vSend_string(" second");
     da4:	81 e8       	ldi	r24, 0x81	; 129
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
						if (count_time>=100)
     dac:	80 91 18 02 	lds	r24, 0x0218
     db0:	90 91 19 02 	lds	r25, 0x0219
     db4:	84 36       	cpi	r24, 0x64	; 100
     db6:	91 05       	cpc	r25, r1
     db8:	c8 f2       	brcs	.-78     	; 0xd6c <main+0x464>
						{
							block_time--;
     dba:	01 50       	subi	r16, 0x01	; 1
							count_time=0;
     dbc:	10 92 19 02 	sts	0x0219, r1
     dc0:	10 92 18 02 	sts	0x0218, r1
					LCD_clearscreen();
					LCD_vSend_string("Block Mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Wait ");
					EEPROM_write(block_address,0x00);
					while (block_time>0)
     dc4:	10 16       	cp	r1, r16
     dc6:	94 f2       	brlt	.-92     	; 0xd6c <main+0x464>
						{
							block_time--;
							count_time=0;
						}
					}
				    LCD_vSend_cmd(0x0e);
     dc8:	8e e0       	ldi	r24, 0x0E	; 14
     dca:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
					no_try_ad=max_tries;
					block_time=block_time_max;
					EEPROM_write(block_address,0xff);
     dce:	89 e0       	ldi	r24, 0x09	; 9
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	6f ef       	ldi	r22, 0xFF	; 255
     dd4:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
							block_time--;
							count_time=0;
						}
					}
				    LCD_vSend_cmd(0x0e);
					no_try_ad=max_tries;
     dd8:	92 e0       	ldi	r25, 0x02	; 2
     dda:	99 87       	std	Y+9, r25	; 0x09
					block_time=block_time_max;
					EEPROM_write(block_address,0xff);
					goto lable1;
     ddc:	f3 ce       	rjmp	.-538    	; 0xbc4 <main+0x2bc>
				}
			}
				
		}
/*******************  check password for guest  ***********************/
		else if (x=='1')
     dde:	11 33       	cpi	r17, 0x31	; 49
     de0:	09 f0       	breq	.+2      	; 0xde4 <main+0x4dc>
     de2:	dc c0       	rjmp	.+440    	; 0xf9c <main+0x694>
		{
			LCD_vSend_string("check pass");
     de4:	89 ee       	ldi	r24, 0xE9	; 233
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,12);
     dec:	82 e0       	ldi	r24, 0x02	; 2
     dee:	6c e0       	ldi	r22, 0x0C	; 12
     df0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
     df4:	8e 01       	movw	r16, r28
     df6:	0c 5f       	subi	r16, 0xFC	; 252
     df8:	1f 4f       	sbci	r17, 0xFF	; 255
     dfa:	0f 2e       	mov	r0, r31
     dfc:	fc e0       	ldi	r31, 0x0C	; 12
     dfe:	ff 2e       	mov	r15, r31
     e00:	f0 2d       	mov	r31, r0
		
			for (i=0;i<4;i++)
			{
				do
				{
					guest[i]=keypad_u8check_press();
     e02:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
     e06:	d8 01       	movw	r26, r16
     e08:	8c 93       	st	X, r24
				
				} while (guest[i]==0xff);
     e0a:	8f 3f       	cpi	r24, 0xFF	; 255
     e0c:	d1 f3       	breq	.-12     	; 0xe02 <main+0x4fa>
				LCD_vSend_char(guest[i]);
     e0e:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     e12:	2f e7       	ldi	r18, 0x7F	; 127
     e14:	3a e1       	ldi	r19, 0x1A	; 26
     e16:	46 e0       	ldi	r20, 0x06	; 6
     e18:	21 50       	subi	r18, 0x01	; 1
     e1a:	30 40       	sbci	r19, 0x00	; 0
     e1c:	40 40       	sbci	r20, 0x00	; 0
     e1e:	e1 f7       	brne	.-8      	; 0xe18 <main+0x510>
     e20:	00 c0       	rjmp	.+0      	; 0xe22 <main+0x51a>
     e22:	00 00       	nop
				_delay_ms(250);
				LCD_movecursor(2,12+i);
     e24:	82 e0       	ldi	r24, 0x02	; 2
     e26:	6f 2d       	mov	r22, r15
     e28:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_char('*');
     e2c:	8a e2       	ldi	r24, 0x2A	; 42
     e2e:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     e32:	f3 94       	inc	r15
     e34:	0f 5f       	subi	r16, 0xFF	; 255
     e36:	1f 4f       	sbci	r17, 0xFF	; 255
		else if (x=='1')
		{
			LCD_vSend_string("check pass");
			LCD_movecursor(2,12);
		
			for (i=0;i<4;i++)
     e38:	30 e1       	ldi	r19, 0x10	; 16
     e3a:	f3 16       	cp	r15, r19
     e3c:	11 f7       	brne	.-60     	; 0xe02 <main+0x4fa>
				LCD_vSend_char(guest[i]);
				_delay_ms(250);
				LCD_movecursor(2,12+i);
				LCD_vSend_char('*');
			}
			if (EEPROM_read(guest_pass_ADDRESS1)==guest[0] && EEPROM_read(guest_pass_ADDRESS2)==guest[1] && EEPROM_read(guest_pass_ADDRESS3)==guest[2] && EEPROM_read(guest_pass_ADDRESS4)==guest[3])
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	90 e0       	ldi	r25, 0x00	; 0
     e42:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     e46:	9c 81       	ldd	r25, Y+4	; 0x04
     e48:	89 17       	cp	r24, r25
     e4a:	59 f5       	brne	.+86     	; 0xea2 <main+0x59a>
     e4c:	86 e0       	ldi	r24, 0x06	; 6
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     e54:	9d 81       	ldd	r25, Y+5	; 0x05
     e56:	89 17       	cp	r24, r25
     e58:	21 f5       	brne	.+72     	; 0xea2 <main+0x59a>
     e5a:	87 e0       	ldi	r24, 0x07	; 7
     e5c:	90 e0       	ldi	r25, 0x00	; 0
     e5e:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     e62:	9e 81       	ldd	r25, Y+6	; 0x06
     e64:	89 17       	cp	r24, r25
     e66:	e9 f4       	brne	.+58     	; 0xea2 <main+0x59a>
     e68:	88 e0       	ldi	r24, 0x08	; 8
     e6a:	90 e0       	ldi	r25, 0x00	; 0
     e6c:	0e 94 fd 02 	call	0x5fa	; 0x5fa <EEPROM_read>
     e70:	9f 81       	ldd	r25, Y+7	; 0x07
     e72:	89 17       	cp	r24, r25
     e74:	b1 f4       	brne	.+44     	; 0xea2 <main+0x59a>
			{
				LCD_clearscreen();
     e76:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				LCD_vSend_string("correct pass");
     e7a:	84 ef       	ldi	r24, 0xF4	; 244
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     e82:	8f ef       	ldi	r24, 0xFF	; 255
     e84:	93 ec       	ldi	r25, 0xC3	; 195
     e86:	a9 e0       	ldi	r26, 0x09	; 9
     e88:	81 50       	subi	r24, 0x01	; 1
     e8a:	90 40       	sbci	r25, 0x00	; 0
     e8c:	a0 40       	sbci	r26, 0x00	; 0
     e8e:	e1 f7       	brne	.-8      	; 0xe88 <main+0x580>
     e90:	00 c0       	rjmp	.+0      	; 0xe92 <main+0x58a>
     e92:	00 00       	nop
				_delay_ms(400);
				LED_vTurnOn('C',guest_led);
     e94:	83 e4       	ldi	r24, 0x43	; 67
     e96:	61 e0       	ldi	r22, 0x01	; 1
     e98:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LED_vTurnOn>
				guest_mode=1;
				/******** start time out for guest *********/
				timer_CTC_init_interrupt();
     e9c:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <timer_CTC_init_interrupt>
     ea0:	8f c0       	rjmp	.+286    	; 0xfc0 <main+0x6b8>
				
			}
			else
			{
				LCD_clearscreen();
     ea2:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				LCD_vSend_string("wrong pass");
     ea6:	81 e0       	ldi	r24, 0x01	; 1
     ea8:	91 e0       	ldi	r25, 0x01	; 1
     eaa:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
     eae:	2f ef       	ldi	r18, 0xFF	; 255
     eb0:	31 ee       	ldi	r19, 0xE1	; 225
     eb2:	44 e0       	ldi	r20, 0x04	; 4
     eb4:	21 50       	subi	r18, 0x01	; 1
     eb6:	30 40       	sbci	r19, 0x00	; 0
     eb8:	40 40       	sbci	r20, 0x00	; 0
     eba:	e1 f7       	brne	.-8      	; 0xeb4 <main+0x5ac>
     ebc:	00 c0       	rjmp	.+0      	; 0xebe <main+0x5b6>
     ebe:	00 00       	nop
				_delay_ms(200);
				if (no_try>0)
     ec0:	38 85       	ldd	r19, Y+8	; 0x08
     ec2:	13 16       	cp	r1, r19
     ec4:	c4 f4       	brge	.+48     	; 0xef6 <main+0x5ee>
				{
					no_try--;
     ec6:	31 50       	subi	r19, 0x01	; 1
     ec8:	38 87       	std	Y+8, r19	; 0x08
					LCD_movecursor(2,1);
     eca:	82 e0       	ldi	r24, 0x02	; 2
     ecc:	61 e0       	ldi	r22, 0x01	; 1
     ece:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("left tries ");
     ed2:	8c e0       	ldi	r24, 0x0C	; 12
     ed4:	91 e0       	ldi	r25, 0x01	; 1
     ed6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					LCD_vSend_char(no_try+49);
     eda:	88 85       	ldd	r24, Y+8	; 0x08
     edc:	8f 5c       	subi	r24, 0xCF	; 207
     ede:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
     ee2:	8f ef       	ldi	r24, 0xFF	; 255
     ee4:	94 e3       	ldi	r25, 0x34	; 52
     ee6:	ac e0       	ldi	r26, 0x0C	; 12
     ee8:	81 50       	subi	r24, 0x01	; 1
     eea:	90 40       	sbci	r25, 0x00	; 0
     eec:	a0 40       	sbci	r26, 0x00	; 0
     eee:	e1 f7       	brne	.-8      	; 0xee8 <main+0x5e0>
     ef0:	00 c0       	rjmp	.+0      	; 0xef2 <main+0x5ea>
     ef2:	00 00       	nop
     ef4:	67 ce       	rjmp	.-818    	; 0xbc4 <main+0x2bc>
					_delay_ms(500);
					goto lable1;
				}
				else if(no_try<=0)
				{
					timer_CTC_init_interrupt();
     ef6:	0e 94 07 0d 	call	0x1a0e	; 0x1a0e <timer_CTC_init_interrupt>
					LCD_clearscreen();
     efa:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
					LCD_vSend_string("Block Mode");
     efe:	80 e7       	ldi	r24, 0x70	; 112
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					LCD_movecursor(2,1);
     f06:	82 e0       	ldi	r24, 0x02	; 2
     f08:	61 e0       	ldi	r22, 0x01	; 1
     f0a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("Wait ");
     f0e:	8b e7       	ldi	r24, 0x7B	; 123
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					EEPROM_write(block_address,0x00);
     f16:	89 e0       	ldi	r24, 0x09	; 9
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	60 e0       	ldi	r22, 0x00	; 0
     f1c:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
     f20:	0a e0       	ldi	r16, 0x0A	; 10
					{
						LED_vTurnOn('C',block_led);
						EEPROM_write(block_address_data,block_time);
						LCD_movecursor(2,6);
						LCD_vSend_cmd(0x0c);
						LCD_vSend_char(block_time/10+48);
     f22:	0f 2e       	mov	r0, r31
     f24:	fa e0       	ldi	r31, 0x0A	; 10
     f26:	ff 2e       	mov	r15, r31
     f28:	f0 2d       	mov	r31, r0
					LCD_movecursor(2,1);
					LCD_vSend_string("Wait ");
					EEPROM_write(block_address,0x00);
					while (block_time>0)
					{
						LED_vTurnOn('C',block_led);
     f2a:	83 e4       	ldi	r24, 0x43	; 67
     f2c:	62 e0       	ldi	r22, 0x02	; 2
     f2e:	0e 94 79 04 	call	0x8f2	; 0x8f2 <LED_vTurnOn>
						EEPROM_write(block_address_data,block_time);
     f32:	80 e1       	ldi	r24, 0x10	; 16
     f34:	90 e0       	ldi	r25, 0x00	; 0
     f36:	60 2f       	mov	r22, r16
     f38:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
						LCD_movecursor(2,6);
     f3c:	82 e0       	ldi	r24, 0x02	; 2
     f3e:	66 e0       	ldi	r22, 0x06	; 6
     f40:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_cmd(0x0c);
     f44:	8c e0       	ldi	r24, 0x0C	; 12
     f46:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
						LCD_vSend_char(block_time/10+48);
     f4a:	80 2f       	mov	r24, r16
     f4c:	6f 2d       	mov	r22, r15
     f4e:	0e 94 50 0d 	call	0x1aa0	; 0x1aa0 <__divmodqi4>
     f52:	19 2f       	mov	r17, r25
     f54:	80 5d       	subi	r24, 0xD0	; 208
     f56:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
						LCD_vSend_char(block_time%10+48);
     f5a:	81 2f       	mov	r24, r17
     f5c:	80 5d       	subi	r24, 0xD0	; 208
     f5e:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
						LCD_vSend_string(" second");
     f62:	81 e8       	ldi	r24, 0x81	; 129
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
						if (count_time>=100)
     f6a:	80 91 18 02 	lds	r24, 0x0218
     f6e:	90 91 19 02 	lds	r25, 0x0219
     f72:	84 36       	cpi	r24, 0x64	; 100
     f74:	91 05       	cpc	r25, r1
     f76:	c8 f2       	brcs	.-78     	; 0xf2a <main+0x622>
						{
							block_time--;
     f78:	01 50       	subi	r16, 0x01	; 1
							count_time=0;
     f7a:	10 92 19 02 	sts	0x0219, r1
     f7e:	10 92 18 02 	sts	0x0218, r1
					LCD_clearscreen();
					LCD_vSend_string("Block Mode");
					LCD_movecursor(2,1);
					LCD_vSend_string("Wait ");
					EEPROM_write(block_address,0x00);
					while (block_time>0)
     f82:	10 16       	cp	r1, r16
     f84:	94 f2       	brlt	.-92     	; 0xf2a <main+0x622>
						{
							block_time--;
							count_time=0;
						}
					}
					LCD_vSend_cmd(0x0e);
     f86:	8e e0       	ldi	r24, 0x0E	; 14
     f88:	0e 94 ad 03 	call	0x75a	; 0x75a <LCD_vSend_cmd>
					no_try=max_tries;
					block_time=block_time_max;
					EEPROM_write(block_address,0xff);
     f8c:	89 e0       	ldi	r24, 0x09	; 9
     f8e:	90 e0       	ldi	r25, 0x00	; 0
     f90:	6f ef       	ldi	r22, 0xFF	; 255
     f92:	0e 94 f5 02 	call	0x5ea	; 0x5ea <EEPROM_write>
							block_time--;
							count_time=0;
						}
					}
					LCD_vSend_cmd(0x0e);
					no_try=max_tries;
     f96:	92 e0       	ldi	r25, 0x02	; 2
     f98:	98 87       	std	Y+8, r25	; 0x08
					block_time=block_time_max;
					EEPROM_write(block_address,0xff);
					goto lable1;
     f9a:	14 ce       	rjmp	.-984    	; 0xbc4 <main+0x2bc>
			}
			
		}
		else
		{
			LCD_vSend_string("wrong choice");
     f9c:	88 e1       	ldi	r24, 0x18	; 24
     f9e:	91 e0       	ldi	r25, 0x01	; 1
     fa0:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
     fa4:	82 e0       	ldi	r24, 0x02	; 2
     fa6:	61 e0       	ldi	r22, 0x01	; 1
     fa8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
     fac:	2f ef       	ldi	r18, 0xFF	; 255
     fae:	32 e5       	ldi	r19, 0x52	; 82
     fb0:	47 e0       	ldi	r20, 0x07	; 7
     fb2:	21 50       	subi	r18, 0x01	; 1
     fb4:	30 40       	sbci	r19, 0x00	; 0
     fb6:	40 40       	sbci	r20, 0x00	; 0
     fb8:	e1 f7       	brne	.-8      	; 0xfb2 <main+0x6aa>
     fba:	00 c0       	rjmp	.+0      	; 0xfbc <main+0x6b4>
     fbc:	00 00       	nop
     fbe:	02 ce       	rjmp	.-1020   	; 0xbc4 <main+0x2bc>
/*********************** End check ********************/

/*************** guest mode operation **************/
	if (guest_mode==1)
	{
		count_time_flag=2;
     fc0:	82 e0       	ldi	r24, 0x02	; 2
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	90 93 15 02 	sts	0x0215, r25
     fc8:	80 93 14 02 	sts	0x0214, r24
		admin_mode=0;
		while(count_time_flag==2)
     fcc:	31 e0       	ldi	r19, 0x01	; 1
     fce:	3f 83       	std	Y+7, r19	; 0x07
     fd0:	76 c1       	rjmp	.+748    	; 0x12be <main+0x9b6>
		{
		
			send='g';
			recive=SPI_MasterTransmitchar(send);
     fd2:	87 e6       	ldi	r24, 0x67	; 103
     fd4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				x=keypad_u8check_press();
				
				if (count_time_flag==guest_time_flag) // **** check session time out
				{
					guest_mode=0;
					count_time_flag=1;
     fd8:	ee 24       	eor	r14, r14
     fda:	ff 24       	eor	r15, r15
     fdc:	e3 94       	inc	r14
			{
				x=keypad_u8check_press();
				
				if (count_time_flag==guest_time_flag) // **** check session time out
				{
					guest_mode=0;
     fde:	00 e0       	ldi	r16, 0x00	; 0
			/**************** Room 3 select ******************/
			if (x=='3')
			{
				send=3;
				recive=SPI_MasterTransmitchar(send);
				LCD_vSend_string("Room3 :S");
     fe0:	0f 2e       	mov	r0, r31
     fe2:	f2 e8       	ldi	r31, 0x82	; 130
     fe4:	4f 2e       	mov	r4, r31
     fe6:	f1 e0       	ldi	r31, 0x01	; 1
     fe8:	5f 2e       	mov	r5, r31
     fea:	f0 2d       	mov	r31, r0
			/**************** Room 2 select ******************/
			if (x=='2')
			{
				send=2;
				recive=SPI_MasterTransmitchar(send);
				LCD_vSend_string("Room2 :S");
     fec:	0f 2e       	mov	r0, r31
     fee:	f9 e7       	ldi	r31, 0x79	; 121
     ff0:	2f 2e       	mov	r2, r31
     ff2:	f1 e0       	ldi	r31, 0x01	; 1
     ff4:	3f 2e       	mov	r3, r31
     ff6:	f0 2d       	mov	r31, r0
		{
		
			send='g';
			recive=SPI_MasterTransmitchar(send);
		g_options:
			LCD_clearscreen();
     ff8:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("1:Room1  2:Room2");
     ffc:	c6 01       	movw	r24, r12
     ffe:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
    1002:	82 e0       	ldi	r24, 0x02	; 2
    1004:	61 e0       	ldi	r22, 0x01	; 1
    1006:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("3:Room3  4:Room4");
    100a:	c5 01       	movw	r24, r10
    100c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			

			x=0xff;
			do 
			{
				x=keypad_u8check_press();
    1010:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
				
				if (count_time_flag==guest_time_flag) // **** check session time out
    1014:	20 91 14 02 	lds	r18, 0x0214
    1018:	30 91 15 02 	lds	r19, 0x0215
    101c:	28 30       	cpi	r18, 0x08	; 8
    101e:	31 05       	cpc	r19, r1
    1020:	d1 f4       	brne	.+52     	; 0x1056 <main+0x74e>
    1022:	18 2f       	mov	r17, r24
				{
					guest_mode=0;
					count_time_flag=1;
    1024:	f0 92 15 02 	sts	0x0215, r15
    1028:	e0 92 14 02 	sts	0x0214, r14
					LCD_clearscreen();
    102c:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
					LCD_vSend_string("session time out");
    1030:	87 e4       	ldi	r24, 0x47	; 71
    1032:	91 e0       	ldi	r25, 0x01	; 1
    1034:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1038:	8f ef       	ldi	r24, 0xFF	; 255
    103a:	94 e3       	ldi	r25, 0x34	; 52
    103c:	ac e0       	ldi	r26, 0x0C	; 12
    103e:	81 50       	subi	r24, 0x01	; 1
    1040:	90 40       	sbci	r25, 0x00	; 0
    1042:	a0 40       	sbci	r26, 0x00	; 0
    1044:	e1 f7       	brne	.-8      	; 0x103e <main+0x736>
    1046:	00 c0       	rjmp	.+0      	; 0x1048 <main+0x740>
    1048:	00 00       	nop
					_delay_ms(500);
					LED_vTurnOff('C',guest_led);
    104a:	83 e4       	ldi	r24, 0x43	; 67
    104c:	61 e0       	ldi	r22, 0x01	; 1
    104e:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vTurnOff>
			{
				x=keypad_u8check_press();
				
				if (count_time_flag==guest_time_flag) // **** check session time out
				{
					guest_mode=0;
    1052:	0f 83       	std	Y+7, r16	; 0x07
					count_time_flag=1;
					LCD_clearscreen();
					LCD_vSend_string("session time out");
					_delay_ms(500);
					LED_vTurnOff('C',guest_led);
					break;
    1054:	03 c0       	rjmp	.+6      	; 0x105c <main+0x754>
					
				}
			} while (x==0xff);
    1056:	8f 3f       	cpi	r24, 0xFF	; 255
    1058:	d9 f2       	breq	.-74     	; 0x1010 <main+0x708>
    105a:	18 2f       	mov	r17, r24
    105c:	2f e7       	ldi	r18, 0x7F	; 127
    105e:	39 ea       	ldi	r19, 0xA9	; 169
    1060:	43 e0       	ldi	r20, 0x03	; 3
    1062:	21 50       	subi	r18, 0x01	; 1
    1064:	30 40       	sbci	r19, 0x00	; 0
    1066:	40 40       	sbci	r20, 0x00	; 0
    1068:	e1 f7       	brne	.-8      	; 0x1062 <main+0x75a>
    106a:	00 c0       	rjmp	.+0      	; 0x106c <main+0x764>
    106c:	00 00       	nop
			_delay_ms(150);
			LCD_clearscreen();
    106e:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			
			/**************** Room 1 select ******************/
			if (x=='1')
    1072:	11 33       	cpi	r17, 0x31	; 49
    1074:	09 f0       	breq	.+2      	; 0x1078 <main+0x770>
    1076:	43 c0       	rjmp	.+134    	; 0x10fe <main+0x7f6>
			{
				send=1;
				recive=SPI_MasterTransmitchar(send);
    1078:	81 e0       	ldi	r24, 0x01	; 1
    107a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room1 :S");
    107e:	88 e5       	ldi	r24, 0x58	; 88
    1080:	91 e0       	ldi	r25, 0x01	; 1
    1082:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    108c:	84 35       	cpi	r24, 0x54	; 84
    108e:	49 f4       	brne	.+18     	; 0x10a2 <main+0x79a>
				{
					LCD_movecursor(1,10);
    1090:	81 e0       	ldi	r24, 0x01	; 1
    1092:	6a e0       	ldi	r22, 0x0A	; 10
    1094:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    1098:	81 e6       	ldi	r24, 0x61	; 97
    109a:	91 e0       	ldi	r25, 0x01	; 1
    109c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    10a0:	0a c0       	rjmp	.+20     	; 0x10b6 <main+0x7ae>
				}
				else if (recive == 'F')
    10a2:	86 34       	cpi	r24, 0x46	; 70
    10a4:	41 f4       	brne	.+16     	; 0x10b6 <main+0x7ae>
				{
					LCD_movecursor(1,10);
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	6a e0       	ldi	r22, 0x0A	; 10
    10aa:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    10ae:	84 e6       	ldi	r24, 0x64	; 100
    10b0:	91 e0       	ldi	r25, 0x01	; 1
    10b2:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    10b6:	82 e0       	ldi	r24, 0x02	; 2
    10b8:	61 e0       	ldi	r22, 0x01	; 1
    10ba:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    10be:	88 e6       	ldi	r24, 0x68	; 104
    10c0:	91 e0       	ldi	r25, 0x01	; 1
    10c2:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    10c6:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    10ca:	8f 3f       	cpi	r24, 0xFF	; 255
    10cc:	e1 f3       	breq	.-8      	; 0x10c6 <main+0x7be>
    10ce:	2f e7       	ldi	r18, 0x7F	; 127
    10d0:	39 ea       	ldi	r19, 0xA9	; 169
    10d2:	43 e0       	ldi	r20, 0x03	; 3
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	30 40       	sbci	r19, 0x00	; 0
    10d8:	40 40       	sbci	r20, 0x00	; 0
    10da:	e1 f7       	brne	.-8      	; 0x10d4 <main+0x7cc>
    10dc:	00 c0       	rjmp	.+0      	; 0x10de <main+0x7d6>
    10de:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    10e0:	80 33       	cpi	r24, 0x30	; 48
    10e2:	19 f4       	brne	.+6      	; 0x10ea <main+0x7e2>
					{
						send=SPI_MasterTransmitchar(x);
    10e4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    10e8:	87 cf       	rjmp	.-242    	; 0xff8 <main+0x6f0>
					}
					else if (x=='1')
    10ea:	81 33       	cpi	r24, 0x31	; 49
    10ec:	19 f4       	brne	.+6      	; 0x10f4 <main+0x7ec>
					{
						send=SPI_MasterTransmitchar(x);
    10ee:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    10f2:	82 cf       	rjmp	.-252    	; 0xff8 <main+0x6f0>
					}
					else if (x=='2')
    10f4:	82 33       	cpi	r24, 0x32	; 50
    10f6:	39 f7       	brne	.-50     	; 0x10c6 <main+0x7be>
					{
						send=SPI_MasterTransmitchar(x);
    10f8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    10fc:	7d cf       	rjmp	.-262    	; 0xff8 <main+0x6f0>
				}
				goto g_options;
			}//end if room1

			/**************** Room 2 select ******************/
			if (x=='2')
    10fe:	12 33       	cpi	r17, 0x32	; 50
    1100:	09 f0       	breq	.+2      	; 0x1104 <main+0x7fc>
    1102:	42 c0       	rjmp	.+132    	; 0x1188 <main+0x880>
			{
				send=2;
				recive=SPI_MasterTransmitchar(send);
    1104:	82 e0       	ldi	r24, 0x02	; 2
    1106:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room2 :S");
    110a:	c1 01       	movw	r24, r2
    110c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    1110:	82 e0       	ldi	r24, 0x02	; 2
    1112:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    1116:	84 35       	cpi	r24, 0x54	; 84
    1118:	49 f4       	brne	.+18     	; 0x112c <main+0x824>
				{
					LCD_movecursor(1,10);
    111a:	81 e0       	ldi	r24, 0x01	; 1
    111c:	6a e0       	ldi	r22, 0x0A	; 10
    111e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    1122:	81 e6       	ldi	r24, 0x61	; 97
    1124:	91 e0       	ldi	r25, 0x01	; 1
    1126:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    112a:	0a c0       	rjmp	.+20     	; 0x1140 <main+0x838>
				}
				else if (recive == 'F')
    112c:	86 34       	cpi	r24, 0x46	; 70
    112e:	41 f4       	brne	.+16     	; 0x1140 <main+0x838>
				{
					LCD_movecursor(1,10);
    1130:	81 e0       	ldi	r24, 0x01	; 1
    1132:	6a e0       	ldi	r22, 0x0A	; 10
    1134:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    1138:	84 e6       	ldi	r24, 0x64	; 100
    113a:	91 e0       	ldi	r25, 0x01	; 1
    113c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    1140:	82 e0       	ldi	r24, 0x02	; 2
    1142:	61 e0       	ldi	r22, 0x01	; 1
    1144:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    1148:	88 e6       	ldi	r24, 0x68	; 104
    114a:	91 e0       	ldi	r25, 0x01	; 1
    114c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    1150:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    1154:	8f 3f       	cpi	r24, 0xFF	; 255
    1156:	e1 f3       	breq	.-8      	; 0x1150 <main+0x848>
    1158:	2f e7       	ldi	r18, 0x7F	; 127
    115a:	39 ea       	ldi	r19, 0xA9	; 169
    115c:	43 e0       	ldi	r20, 0x03	; 3
    115e:	21 50       	subi	r18, 0x01	; 1
    1160:	30 40       	sbci	r19, 0x00	; 0
    1162:	40 40       	sbci	r20, 0x00	; 0
    1164:	e1 f7       	brne	.-8      	; 0x115e <main+0x856>
    1166:	00 c0       	rjmp	.+0      	; 0x1168 <main+0x860>
    1168:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    116a:	80 33       	cpi	r24, 0x30	; 48
    116c:	19 f4       	brne	.+6      	; 0x1174 <main+0x86c>
					{
						send=SPI_MasterTransmitchar(x);
    116e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1172:	42 cf       	rjmp	.-380    	; 0xff8 <main+0x6f0>
					}
					else if (x=='1')
    1174:	81 33       	cpi	r24, 0x31	; 49
    1176:	19 f4       	brne	.+6      	; 0x117e <main+0x876>
					{
						send=SPI_MasterTransmitchar(x);
    1178:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    117c:	3d cf       	rjmp	.-390    	; 0xff8 <main+0x6f0>
					}
					else if (x=='2')
    117e:	82 33       	cpi	r24, 0x32	; 50
    1180:	39 f7       	brne	.-50     	; 0x1150 <main+0x848>
					{
						send=SPI_MasterTransmitchar(x);
    1182:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1186:	38 cf       	rjmp	.-400    	; 0xff8 <main+0x6f0>
					
				}
				goto g_options;
			}//end if room2
			/**************** Room 3 select ******************/
			if (x=='3')
    1188:	13 33       	cpi	r17, 0x33	; 51
    118a:	09 f0       	breq	.+2      	; 0x118e <main+0x886>
    118c:	42 c0       	rjmp	.+132    	; 0x1212 <main+0x90a>
			{
				send=3;
				recive=SPI_MasterTransmitchar(send);
    118e:	83 e0       	ldi	r24, 0x03	; 3
    1190:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room3 :S");
    1194:	c2 01       	movw	r24, r4
    1196:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    119a:	83 e0       	ldi	r24, 0x03	; 3
    119c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    11a0:	84 35       	cpi	r24, 0x54	; 84
    11a2:	49 f4       	brne	.+18     	; 0x11b6 <main+0x8ae>
				{
					LCD_movecursor(1,10);
    11a4:	81 e0       	ldi	r24, 0x01	; 1
    11a6:	6a e0       	ldi	r22, 0x0A	; 10
    11a8:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    11ac:	81 e6       	ldi	r24, 0x61	; 97
    11ae:	91 e0       	ldi	r25, 0x01	; 1
    11b0:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    11b4:	0a c0       	rjmp	.+20     	; 0x11ca <main+0x8c2>
				}
				else if (recive == 'F')
    11b6:	86 34       	cpi	r24, 0x46	; 70
    11b8:	41 f4       	brne	.+16     	; 0x11ca <main+0x8c2>
				{
					LCD_movecursor(1,10);
    11ba:	81 e0       	ldi	r24, 0x01	; 1
    11bc:	6a e0       	ldi	r22, 0x0A	; 10
    11be:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    11c2:	84 e6       	ldi	r24, 0x64	; 100
    11c4:	91 e0       	ldi	r25, 0x01	; 1
    11c6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    11ca:	82 e0       	ldi	r24, 0x02	; 2
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    11d2:	88 e6       	ldi	r24, 0x68	; 104
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    11da:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    11de:	8f 3f       	cpi	r24, 0xFF	; 255
    11e0:	e1 f3       	breq	.-8      	; 0x11da <main+0x8d2>
    11e2:	2f e7       	ldi	r18, 0x7F	; 127
    11e4:	39 ea       	ldi	r19, 0xA9	; 169
    11e6:	43 e0       	ldi	r20, 0x03	; 3
    11e8:	21 50       	subi	r18, 0x01	; 1
    11ea:	30 40       	sbci	r19, 0x00	; 0
    11ec:	40 40       	sbci	r20, 0x00	; 0
    11ee:	e1 f7       	brne	.-8      	; 0x11e8 <main+0x8e0>
    11f0:	00 c0       	rjmp	.+0      	; 0x11f2 <main+0x8ea>
    11f2:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    11f4:	80 33       	cpi	r24, 0x30	; 48
    11f6:	19 f4       	brne	.+6      	; 0x11fe <main+0x8f6>
					{
						send=SPI_MasterTransmitchar(x);
    11f8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    11fc:	fd ce       	rjmp	.-518    	; 0xff8 <main+0x6f0>
					}
					else if (x=='1')
    11fe:	81 33       	cpi	r24, 0x31	; 49
    1200:	19 f4       	brne	.+6      	; 0x1208 <main+0x900>
					{
						send=SPI_MasterTransmitchar(x);
    1202:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    1206:	f8 ce       	rjmp	.-528    	; 0xff8 <main+0x6f0>
					}
					else if (x=='2')
    1208:	82 33       	cpi	r24, 0x32	; 50
    120a:	39 f7       	brne	.-50     	; 0x11da <main+0x8d2>
					{
						send=SPI_MasterTransmitchar(x);
    120c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1210:	f3 ce       	rjmp	.-538    	; 0xff8 <main+0x6f0>
				}
				goto g_options;
			}//end if room3
		
			/**************** Room 4 select ******************/
			if (x=='4')
    1212:	14 33       	cpi	r17, 0x34	; 52
    1214:	09 f0       	breq	.+2      	; 0x1218 <main+0x910>
    1216:	43 c0       	rjmp	.+134    	; 0x129e <main+0x996>
			{
				send=4;
				recive=SPI_MasterTransmitchar(send);
    1218:	84 e0       	ldi	r24, 0x04	; 4
    121a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room4 :S");
    121e:	8b e8       	ldi	r24, 0x8B	; 139
    1220:	91 e0       	ldi	r25, 0x01	; 1
    1222:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    1226:	84 e0       	ldi	r24, 0x04	; 4
    1228:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    122c:	84 35       	cpi	r24, 0x54	; 84
    122e:	49 f4       	brne	.+18     	; 0x1242 <main+0x93a>
				{
					LCD_movecursor(1,10);
    1230:	81 e0       	ldi	r24, 0x01	; 1
    1232:	6a e0       	ldi	r22, 0x0A	; 10
    1234:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    1238:	81 e6       	ldi	r24, 0x61	; 97
    123a:	91 e0       	ldi	r25, 0x01	; 1
    123c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1240:	0a c0       	rjmp	.+20     	; 0x1256 <main+0x94e>
				}
				else if (recive == 'F')
    1242:	86 34       	cpi	r24, 0x46	; 70
    1244:	41 f4       	brne	.+16     	; 0x1256 <main+0x94e>
				{
					LCD_movecursor(1,10);
    1246:	81 e0       	ldi	r24, 0x01	; 1
    1248:	6a e0       	ldi	r22, 0x0A	; 10
    124a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    124e:	84 e6       	ldi	r24, 0x64	; 100
    1250:	91 e0       	ldi	r25, 0x01	; 1
    1252:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    1256:	82 e0       	ldi	r24, 0x02	; 2
    1258:	61 e0       	ldi	r22, 0x01	; 1
    125a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    125e:	88 e6       	ldi	r24, 0x68	; 104
    1260:	91 e0       	ldi	r25, 0x01	; 1
    1262:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    1266:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    126a:	8f 3f       	cpi	r24, 0xFF	; 255
    126c:	e1 f3       	breq	.-8      	; 0x1266 <main+0x95e>
    126e:	2f e7       	ldi	r18, 0x7F	; 127
    1270:	39 ea       	ldi	r19, 0xA9	; 169
    1272:	43 e0       	ldi	r20, 0x03	; 3
    1274:	21 50       	subi	r18, 0x01	; 1
    1276:	30 40       	sbci	r19, 0x00	; 0
    1278:	40 40       	sbci	r20, 0x00	; 0
    127a:	e1 f7       	brne	.-8      	; 0x1274 <main+0x96c>
    127c:	00 c0       	rjmp	.+0      	; 0x127e <main+0x976>
    127e:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    1280:	80 33       	cpi	r24, 0x30	; 48
    1282:	19 f4       	brne	.+6      	; 0x128a <main+0x982>
					{
						send=SPI_MasterTransmitchar(x);
    1284:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1288:	b7 ce       	rjmp	.-658    	; 0xff8 <main+0x6f0>
					}
					else if (x=='1')
    128a:	81 33       	cpi	r24, 0x31	; 49
    128c:	19 f4       	brne	.+6      	; 0x1294 <main+0x98c>
					{
						send=SPI_MasterTransmitchar(x);
    128e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    1292:	b2 ce       	rjmp	.-668    	; 0xff8 <main+0x6f0>
					}
					else if (x=='2')
    1294:	82 33       	cpi	r24, 0x32	; 50
    1296:	39 f7       	brne	.-50     	; 0x1266 <main+0x95e>
					{
						send=SPI_MasterTransmitchar(x);
    1298:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    129c:	ad ce       	rjmp	.-678    	; 0xff8 <main+0x6f0>
					
				}
				goto g_options;
			}//end if room4

	else if (x!=0xff)
    129e:	1f 3f       	cpi	r17, 0xFF	; 255
    12a0:	71 f0       	breq	.+28     	; 0x12be <main+0x9b6>
	{
		LCD_vSend_string("wrong choice");
    12a2:	88 e1       	ldi	r24, 0x18	; 24
    12a4:	91 e0       	ldi	r25, 0x01	; 1
    12a6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    12aa:	8f e7       	ldi	r24, 0x7F	; 127
    12ac:	9a e1       	ldi	r25, 0x1A	; 26
    12ae:	a6 e0       	ldi	r26, 0x06	; 6
    12b0:	81 50       	subi	r24, 0x01	; 1
    12b2:	90 40       	sbci	r25, 0x00	; 0
    12b4:	a0 40       	sbci	r26, 0x00	; 0
    12b6:	e1 f7       	brne	.-8      	; 0x12b0 <main+0x9a8>
    12b8:	00 c0       	rjmp	.+0      	; 0x12ba <main+0x9b2>
    12ba:	00 00       	nop
    12bc:	9d ce       	rjmp	.-710    	; 0xff8 <main+0x6f0>
/*************** guest mode operation **************/
	if (guest_mode==1)
	{
		count_time_flag=2;
		admin_mode=0;
		while(count_time_flag==2)
    12be:	80 91 14 02 	lds	r24, 0x0214
    12c2:	90 91 15 02 	lds	r25, 0x0215
    12c6:	82 30       	cpi	r24, 0x02	; 2
    12c8:	91 05       	cpc	r25, r1
    12ca:	09 f4       	brne	.+2      	; 0x12ce <main+0x9c6>
    12cc:	82 ce       	rjmp	.-764    	; 0xfd2 <main+0x6ca>
    12ce:	7a cc       	rjmp	.-1804   	; 0xbc4 <main+0x2bc>
/************************ End guest mode operation *************************************************/
/*************************** Admin mode operations ********************/		

	if (admin_mode==1)
		{
			count_time_flag=3;
    12d0:	83 e0       	ldi	r24, 0x03	; 3
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	90 93 15 02 	sts	0x0215, r25
    12d8:	80 93 14 02 	sts	0x0214, r24
				recive=SPI_MasterTransmitchar(send);
			
		/************************a_options(1.2.3.4)***********************************/	
		a_options:
			LCD_clearscreen();
			LCD_vSend_string("1:Room1  2:Room2");
    12dc:	0f 2e       	mov	r0, r31
    12de:	f5 e2       	ldi	r31, 0x25	; 37
    12e0:	4f 2e       	mov	r4, r31
    12e2:	f1 e0       	ldi	r31, 0x01	; 1
    12e4:	5f 2e       	mov	r5, r31
    12e6:	f0 2d       	mov	r31, r0
						if (x=='2')//control
						{
							send='2';
							recive=SPI_MasterTransmitchar(send);
							LCD_clearscreen();
							LCD_vSend_string("AIR cond :S");
    12e8:	0f 2e       	mov	r0, r31
    12ea:	f5 e0       	ldi	r31, 0x05	; 5
    12ec:	af 2e       	mov	r10, r31
    12ee:	f2 e0       	ldi	r31, 0x02	; 2
    12f0:	bf 2e       	mov	r11, r31
    12f2:	f0 2d       	mov	r31, r0

	if (admin_mode==1)
		{
			count_time_flag=3;
			guest_mode =0;
			while(count_time_flag==3)
    12f4:	de c2       	rjmp	.+1468   	; 0x18b2 <main+0xfaa>
			{
				
				send='a';
				recive=SPI_MasterTransmitchar(send);
    12f6:	81 e6       	ldi	r24, 0x61	; 97
    12f8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							{
								LCD_movecursor(1,13);
								LCD_vSend_string("OFF");
							}
							LCD_movecursor(2,1);
							LCD_vSend_string("1-ON 2-OFF 0-RET");
    12fc:	0f 2e       	mov	r0, r31
    12fe:	f8 e6       	ldi	r31, 0x68	; 104
    1300:	2f 2e       	mov	r2, r31
    1302:	f1 e0       	ldi	r31, 0x01	; 1
    1304:	3f 2e       	mov	r3, r31
    1306:	f0 2d       	mov	r31, r0
    1308:	02 2d       	mov	r16, r2
    130a:	d3 2c       	mov	r13, r3
				send='a';
				recive=SPI_MasterTransmitchar(send);
			
		/************************a_options(1.2.3.4)***********************************/	
		a_options:
			LCD_clearscreen();
    130c:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			LCD_vSend_string("1:Room1  2:Room2");
    1310:	c2 01       	movw	r24, r4
    1312:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			LCD_movecursor(2,1);
    1316:	82 e0       	ldi	r24, 0x02	; 2
    1318:	61 e0       	ldi	r22, 0x01	; 1
    131a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
			LCD_vSend_string("3:Room3  4:More");
    131e:	84 e9       	ldi	r24, 0x94	; 148
    1320:	91 e0       	ldi	r25, 0x01	; 1
    1322:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
			
			x=0xff;
			do
			{
				x=keypad_u8check_press();
    1326:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
				
				if (count_time_flag==admin_time_flag) // **** check session time out
    132a:	20 91 14 02 	lds	r18, 0x0214
    132e:	30 91 15 02 	lds	r19, 0x0215
    1332:	27 30       	cpi	r18, 0x07	; 7
    1334:	31 05       	cpc	r19, r1
    1336:	d9 f4       	brne	.+54     	; 0x136e <main+0xa66>
    1338:	18 2f       	mov	r17, r24
				{
					admin_mode=0;
					count_time_flag=1;
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	90 e0       	ldi	r25, 0x00	; 0
    133e:	90 93 15 02 	sts	0x0215, r25
    1342:	80 93 14 02 	sts	0x0214, r24
					LCD_clearscreen();
    1346:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
					LCD_vSend_string("session time out");
    134a:	87 e4       	ldi	r24, 0x47	; 71
    134c:	91 e0       	ldi	r25, 0x01	; 1
    134e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1352:	2f ef       	ldi	r18, 0xFF	; 255
    1354:	34 e3       	ldi	r19, 0x34	; 52
    1356:	4c e0       	ldi	r20, 0x0C	; 12
    1358:	21 50       	subi	r18, 0x01	; 1
    135a:	30 40       	sbci	r19, 0x00	; 0
    135c:	40 40       	sbci	r20, 0x00	; 0
    135e:	e1 f7       	brne	.-8      	; 0x1358 <main+0xa50>
    1360:	00 c0       	rjmp	.+0      	; 0x1362 <main+0xa5a>
    1362:	00 00       	nop
					_delay_ms(500);
					LED_vTurnOff('C',admin_led);
    1364:	83 e4       	ldi	r24, 0x43	; 67
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vTurnOff>
					break;
    136c:	03 c0       	rjmp	.+6      	; 0x1374 <main+0xa6c>
					
				}
			} while (x==0xff);
    136e:	8f 3f       	cpi	r24, 0xFF	; 255
    1370:	d1 f2       	breq	.-76     	; 0x1326 <main+0xa1e>
    1372:	18 2f       	mov	r17, r24
    1374:	8f e7       	ldi	r24, 0x7F	; 127
    1376:	99 ea       	ldi	r25, 0xA9	; 169
    1378:	a3 e0       	ldi	r26, 0x03	; 3
    137a:	81 50       	subi	r24, 0x01	; 1
    137c:	90 40       	sbci	r25, 0x00	; 0
    137e:	a0 40       	sbci	r26, 0x00	; 0
    1380:	e1 f7       	brne	.-8      	; 0x137a <main+0xa72>
    1382:	00 c0       	rjmp	.+0      	; 0x1384 <main+0xa7c>
    1384:	00 00       	nop
			_delay_ms(150);
			LCD_clearscreen();
    1386:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
			
			/**************** Room 1 select ******************/
			if (x=='1')
    138a:	11 33       	cpi	r17, 0x31	; 49
    138c:	09 f0       	breq	.+2      	; 0x1390 <main+0xa88>
    138e:	42 c0       	rjmp	.+132    	; 0x1414 <main+0xb0c>
			{
				send=1;
				recive=SPI_MasterTransmitchar(send);
    1390:	81 e0       	ldi	r24, 0x01	; 1
    1392:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room1 :S");
    1396:	88 e5       	ldi	r24, 0x58	; 88
    1398:	91 e0       	ldi	r25, 0x01	; 1
    139a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    139e:	81 e0       	ldi	r24, 0x01	; 1
    13a0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    13a4:	84 35       	cpi	r24, 0x54	; 84
    13a6:	49 f4       	brne	.+18     	; 0x13ba <main+0xab2>
				{
					LCD_movecursor(1,10);
    13a8:	81 e0       	ldi	r24, 0x01	; 1
    13aa:	6a e0       	ldi	r22, 0x0A	; 10
    13ac:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    13b0:	81 e6       	ldi	r24, 0x61	; 97
    13b2:	91 e0       	ldi	r25, 0x01	; 1
    13b4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    13b8:	0a c0       	rjmp	.+20     	; 0x13ce <main+0xac6>
				}
				else if (recive == 'F')
    13ba:	86 34       	cpi	r24, 0x46	; 70
    13bc:	41 f4       	brne	.+16     	; 0x13ce <main+0xac6>
				{
					LCD_movecursor(1,10);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	6a e0       	ldi	r22, 0x0A	; 10
    13c2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    13c6:	84 e6       	ldi	r24, 0x64	; 100
    13c8:	91 e0       	ldi	r25, 0x01	; 1
    13ca:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    13ce:	82 e0       	ldi	r24, 0x02	; 2
    13d0:	61 e0       	ldi	r22, 0x01	; 1
    13d2:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    13d6:	c1 01       	movw	r24, r2
    13d8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    13dc:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    13e0:	8f 3f       	cpi	r24, 0xFF	; 255
    13e2:	e1 f3       	breq	.-8      	; 0x13dc <main+0xad4>
    13e4:	2f e7       	ldi	r18, 0x7F	; 127
    13e6:	39 ea       	ldi	r19, 0xA9	; 169
    13e8:	43 e0       	ldi	r20, 0x03	; 3
    13ea:	21 50       	subi	r18, 0x01	; 1
    13ec:	30 40       	sbci	r19, 0x00	; 0
    13ee:	40 40       	sbci	r20, 0x00	; 0
    13f0:	e1 f7       	brne	.-8      	; 0x13ea <main+0xae2>
    13f2:	00 c0       	rjmp	.+0      	; 0x13f4 <main+0xaec>
    13f4:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    13f6:	80 33       	cpi	r24, 0x30	; 48
    13f8:	19 f4       	brne	.+6      	; 0x1400 <main+0xaf8>
					{
						send=SPI_MasterTransmitchar(x);
    13fa:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    13fe:	86 cf       	rjmp	.-244    	; 0x130c <main+0xa04>
					}
					else if (x=='1')
    1400:	81 33       	cpi	r24, 0x31	; 49
    1402:	19 f4       	brne	.+6      	; 0x140a <main+0xb02>
					{
						send=SPI_MasterTransmitchar(x);
    1404:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    1408:	81 cf       	rjmp	.-254    	; 0x130c <main+0xa04>
					}
					else if (x=='2')
    140a:	82 33       	cpi	r24, 0x32	; 50
    140c:	39 f7       	brne	.-50     	; 0x13dc <main+0xad4>
					{
						send=SPI_MasterTransmitchar(x);
    140e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1412:	7c cf       	rjmp	.-264    	; 0x130c <main+0xa04>
				}
			goto a_options;	
			}//end if room1
			
			/**************** Room 2 select ******************/
			if (x=='2')
    1414:	12 33       	cpi	r17, 0x32	; 50
    1416:	09 f0       	breq	.+2      	; 0x141a <main+0xb12>
    1418:	42 c0       	rjmp	.+132    	; 0x149e <main+0xb96>
			{
				send=2;
				recive=SPI_MasterTransmitchar(send);
    141a:	82 e0       	ldi	r24, 0x02	; 2
    141c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room2 :S");
    1420:	89 e7       	ldi	r24, 0x79	; 121
    1422:	91 e0       	ldi	r25, 0x01	; 1
    1424:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    1428:	82 e0       	ldi	r24, 0x02	; 2
    142a:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    142e:	84 35       	cpi	r24, 0x54	; 84
    1430:	49 f4       	brne	.+18     	; 0x1444 <main+0xb3c>
				{
					LCD_movecursor(1,10);
    1432:	81 e0       	ldi	r24, 0x01	; 1
    1434:	6a e0       	ldi	r22, 0x0A	; 10
    1436:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    143a:	81 e6       	ldi	r24, 0x61	; 97
    143c:	91 e0       	ldi	r25, 0x01	; 1
    143e:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1442:	0a c0       	rjmp	.+20     	; 0x1458 <main+0xb50>
				}
				else if (recive == 'F')
    1444:	86 34       	cpi	r24, 0x46	; 70
    1446:	41 f4       	brne	.+16     	; 0x1458 <main+0xb50>
				{
					LCD_movecursor(1,10);
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	6a e0       	ldi	r22, 0x0A	; 10
    144c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    1450:	84 e6       	ldi	r24, 0x64	; 100
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    1458:	82 e0       	ldi	r24, 0x02	; 2
    145a:	61 e0       	ldi	r22, 0x01	; 1
    145c:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    1460:	c1 01       	movw	r24, r2
    1462:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    1466:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    146a:	8f 3f       	cpi	r24, 0xFF	; 255
    146c:	e1 f3       	breq	.-8      	; 0x1466 <main+0xb5e>
    146e:	2f e7       	ldi	r18, 0x7F	; 127
    1470:	39 ea       	ldi	r19, 0xA9	; 169
    1472:	43 e0       	ldi	r20, 0x03	; 3
    1474:	21 50       	subi	r18, 0x01	; 1
    1476:	30 40       	sbci	r19, 0x00	; 0
    1478:	40 40       	sbci	r20, 0x00	; 0
    147a:	e1 f7       	brne	.-8      	; 0x1474 <main+0xb6c>
    147c:	00 c0       	rjmp	.+0      	; 0x147e <main+0xb76>
    147e:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    1480:	80 33       	cpi	r24, 0x30	; 48
    1482:	19 f4       	brne	.+6      	; 0x148a <main+0xb82>
					{
						send=SPI_MasterTransmitchar(x);
    1484:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1488:	41 cf       	rjmp	.-382    	; 0x130c <main+0xa04>
					}
					else if (x=='1')
    148a:	81 33       	cpi	r24, 0x31	; 49
    148c:	19 f4       	brne	.+6      	; 0x1494 <main+0xb8c>
					{
						send=SPI_MasterTransmitchar(x);
    148e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    1492:	3c cf       	rjmp	.-392    	; 0x130c <main+0xa04>
					}
					else if (x=='2')
    1494:	82 33       	cpi	r24, 0x32	; 50
    1496:	39 f7       	brne	.-50     	; 0x1466 <main+0xb5e>
					{
						send=SPI_MasterTransmitchar(x);
    1498:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    149c:	37 cf       	rjmp	.-402    	; 0x130c <main+0xa04>
				}
			goto a_options;		
			}//end if room2
			
			/**************** Room 3 select ******************/
			if (x=='3')
    149e:	13 33       	cpi	r17, 0x33	; 51
    14a0:	09 f0       	breq	.+2      	; 0x14a4 <main+0xb9c>
    14a2:	42 c0       	rjmp	.+132    	; 0x1528 <main+0xc20>
			{
				send=3;
				recive=SPI_MasterTransmitchar(send);
    14a4:	83 e0       	ldi	r24, 0x03	; 3
    14a6:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				LCD_vSend_string("Room3 :S");
    14aa:	82 e8       	ldi	r24, 0x82	; 130
    14ac:	91 e0       	ldi	r25, 0x01	; 1
    14ae:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				/******* room status****/
				recive=SPI_MasterTransmitchar(send);
    14b2:	83 e0       	ldi	r24, 0x03	; 3
    14b4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				if (recive == 'T')
    14b8:	84 35       	cpi	r24, 0x54	; 84
    14ba:	49 f4       	brne	.+18     	; 0x14ce <main+0xbc6>
				{
					LCD_movecursor(1,10);
    14bc:	81 e0       	ldi	r24, 0x01	; 1
    14be:	6a e0       	ldi	r22, 0x0A	; 10
    14c0:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("ON");
    14c4:	81 e6       	ldi	r24, 0x61	; 97
    14c6:	91 e0       	ldi	r25, 0x01	; 1
    14c8:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    14cc:	0a c0       	rjmp	.+20     	; 0x14e2 <main+0xbda>
				}
				else if (recive == 'F')
    14ce:	86 34       	cpi	r24, 0x46	; 70
    14d0:	41 f4       	brne	.+16     	; 0x14e2 <main+0xbda>
				{
					LCD_movecursor(1,10);
    14d2:	81 e0       	ldi	r24, 0x01	; 1
    14d4:	6a e0       	ldi	r22, 0x0A	; 10
    14d6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("OFF");
    14da:	84 e6       	ldi	r24, 0x64	; 100
    14dc:	91 e0       	ldi	r25, 0x01	; 1
    14de:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				}
				LCD_movecursor(2,1);
    14e2:	82 e0       	ldi	r24, 0x02	; 2
    14e4:	61 e0       	ldi	r22, 0x01	; 1
    14e6:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("1-ON 2-OFF 0-RET");
    14ea:	c1 01       	movw	r24, r2
    14ec:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				while(1)
				{
					x=0xff;
					do
					{
						x=keypad_u8check_press();
    14f0:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					} while (x==0xff);
    14f4:	8f 3f       	cpi	r24, 0xFF	; 255
    14f6:	e1 f3       	breq	.-8      	; 0x14f0 <main+0xbe8>
    14f8:	2f e7       	ldi	r18, 0x7F	; 127
    14fa:	39 ea       	ldi	r19, 0xA9	; 169
    14fc:	43 e0       	ldi	r20, 0x03	; 3
    14fe:	21 50       	subi	r18, 0x01	; 1
    1500:	30 40       	sbci	r19, 0x00	; 0
    1502:	40 40       	sbci	r20, 0x00	; 0
    1504:	e1 f7       	brne	.-8      	; 0x14fe <main+0xbf6>
    1506:	00 c0       	rjmp	.+0      	; 0x1508 <main+0xc00>
    1508:	00 00       	nop
					_delay_ms(150);
					
					if (x=='0')
    150a:	80 33       	cpi	r24, 0x30	; 48
    150c:	19 f4       	brne	.+6      	; 0x1514 <main+0xc0c>
					{
						send=SPI_MasterTransmitchar(x);
    150e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						break;
    1512:	fc ce       	rjmp	.-520    	; 0x130c <main+0xa04>
					}
					else if (x=='1')
    1514:	81 33       	cpi	r24, 0x31	; 49
    1516:	19 f4       	brne	.+6      	; 0x151e <main+0xc16>
					{
						send=SPI_MasterTransmitchar(x);
    1518:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    151c:	f7 ce       	rjmp	.-530    	; 0x130c <main+0xa04>
					}
					else if (x=='2')
    151e:	82 33       	cpi	r24, 0x32	; 50
    1520:	39 f7       	brne	.-50     	; 0x14f0 <main+0xbe8>
					{
						send=SPI_MasterTransmitchar(x);
    1522:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
						
						break;
    1526:	f2 ce       	rjmp	.-540    	; 0x130c <main+0xa04>
				}
				goto a_options;
			}//end if room3
			
			/************************* More selsct **********************/
		if (x=='4')//more 
    1528:	14 33       	cpi	r17, 0x34	; 52
    152a:	09 f0       	breq	.+2      	; 0x152e <main+0xc26>
    152c:	b2 c1       	rjmp	.+868    	; 0x1892 <main+0xf8a>
			{
				send=4;
				recive=SPI_MasterTransmitchar(send);
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
			More:
				LCD_clearscreen();
				LCD_vSend_string("5-Room4  6-TV");
    1534:	0f 2e       	mov	r0, r31
    1536:	f4 ea       	ldi	r31, 0xA4	; 164
    1538:	ef 2e       	mov	r14, r31
    153a:	f1 e0       	ldi	r31, 0x01	; 1
    153c:	ff 2e       	mov	r15, r31
    153e:	f0 2d       	mov	r31, r0
		if (x=='4')//more 
			{
				send=4;
				recive=SPI_MasterTransmitchar(send);
			More:
				LCD_clearscreen();
    1540:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				LCD_vSend_string("5-Room4  6-TV");
    1544:	c7 01       	movw	r24, r14
    1546:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				LCD_movecursor(2,1);
    154a:	82 e0       	ldi	r24, 0x02	; 2
    154c:	61 e0       	ldi	r22, 0x01	; 1
    154e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
				LCD_vSend_string("7-Air cond 8-RET");
    1552:	82 eb       	ldi	r24, 0xB2	; 178
    1554:	91 e0       	ldi	r25, 0x01	; 1
    1556:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
				
				
				x=0xff;
				do
				{
					x=keypad_u8check_press();
    155a:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
					
					if (count_time_flag==admin_time_flag) // **** check session time out
    155e:	20 91 14 02 	lds	r18, 0x0214
    1562:	30 91 15 02 	lds	r19, 0x0215
    1566:	27 30       	cpi	r18, 0x07	; 7
    1568:	31 05       	cpc	r19, r1
    156a:	d9 f4       	brne	.+54     	; 0x15a2 <main+0xc9a>
    156c:	18 2f       	mov	r17, r24
					{
						admin_mode=0;
						count_time_flag=1;
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	90 93 15 02 	sts	0x0215, r25
    1576:	80 93 14 02 	sts	0x0214, r24
						LCD_clearscreen();
    157a:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
						LCD_vSend_string("session time out");
    157e:	87 e4       	ldi	r24, 0x47	; 71
    1580:	91 e0       	ldi	r25, 0x01	; 1
    1582:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1586:	8f ef       	ldi	r24, 0xFF	; 255
    1588:	94 e3       	ldi	r25, 0x34	; 52
    158a:	ac e0       	ldi	r26, 0x0C	; 12
    158c:	81 50       	subi	r24, 0x01	; 1
    158e:	90 40       	sbci	r25, 0x00	; 0
    1590:	a0 40       	sbci	r26, 0x00	; 0
    1592:	e1 f7       	brne	.-8      	; 0x158c <main+0xc84>
    1594:	00 c0       	rjmp	.+0      	; 0x1596 <main+0xc8e>
    1596:	00 00       	nop
						_delay_ms(500);
						LED_vTurnOff('C',admin_led);
    1598:	83 e4       	ldi	r24, 0x43	; 67
    159a:	60 e0       	ldi	r22, 0x00	; 0
    159c:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vTurnOff>
						break;
    15a0:	03 c0       	rjmp	.+6      	; 0x15a8 <main+0xca0>
					}
				} while (x==0xff);
    15a2:	8f 3f       	cpi	r24, 0xFF	; 255
    15a4:	d1 f2       	breq	.-76     	; 0x155a <main+0xc52>
    15a6:	18 2f       	mov	r17, r24
    15a8:	2f e7       	ldi	r18, 0x7F	; 127
    15aa:	39 ea       	ldi	r19, 0xA9	; 169
    15ac:	43 e0       	ldi	r20, 0x03	; 3
    15ae:	21 50       	subi	r18, 0x01	; 1
    15b0:	30 40       	sbci	r19, 0x00	; 0
    15b2:	40 40       	sbci	r20, 0x00	; 0
    15b4:	e1 f7       	brne	.-8      	; 0x15ae <main+0xca6>
    15b6:	00 c0       	rjmp	.+0      	; 0x15b8 <main+0xcb0>
    15b8:	00 00       	nop
				_delay_ms(150);
				LCD_clearscreen();
    15ba:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
				/************** RET ********************/
				if (x=='8')
    15be:	18 33       	cpi	r17, 0x38	; 56
    15c0:	21 f4       	brne	.+8      	; 0x15ca <main+0xcc2>
				{
					send=8;
					recive=SPI_MasterTransmitchar(send);
    15c2:	88 e0       	ldi	r24, 0x08	; 8
    15c4:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
					goto a_options;
    15c8:	a1 ce       	rjmp	.-702    	; 0x130c <main+0xa04>
				}
				/**************** Room 4 select ******************/
				if (x=='5')
    15ca:	15 33       	cpi	r17, 0x35	; 53
    15cc:	09 f0       	breq	.+2      	; 0x15d0 <main+0xcc8>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <main+0xd4e>
				{
					send=5;
					recive=SPI_MasterTransmitchar(send);
    15d0:	85 e0       	ldi	r24, 0x05	; 5
    15d2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
					LCD_vSend_string("Room4 :S");
    15d6:	8b e8       	ldi	r24, 0x8B	; 139
    15d8:	91 e0       	ldi	r25, 0x01	; 1
    15da:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					/******* room status****/
					recive=SPI_MasterTransmitchar(send);
    15de:	85 e0       	ldi	r24, 0x05	; 5
    15e0:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
					if (recive == 'T')
    15e4:	84 35       	cpi	r24, 0x54	; 84
    15e6:	49 f4       	brne	.+18     	; 0x15fa <main+0xcf2>
					{
						LCD_movecursor(1,10);
    15e8:	81 e0       	ldi	r24, 0x01	; 1
    15ea:	6a e0       	ldi	r22, 0x0A	; 10
    15ec:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_string("ON");
    15f0:	81 e6       	ldi	r24, 0x61	; 97
    15f2:	91 e0       	ldi	r25, 0x01	; 1
    15f4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    15f8:	0a c0       	rjmp	.+20     	; 0x160e <main+0xd06>
					}
					else if (recive == 'F')
    15fa:	86 34       	cpi	r24, 0x46	; 70
    15fc:	41 f4       	brne	.+16     	; 0x160e <main+0xd06>
					{
						LCD_movecursor(1,10);
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	6a e0       	ldi	r22, 0x0A	; 10
    1602:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_string("OFF");
    1606:	84 e6       	ldi	r24, 0x64	; 100
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					}
					LCD_movecursor(2,1);
    160e:	82 e0       	ldi	r24, 0x02	; 2
    1610:	61 e0       	ldi	r22, 0x01	; 1
    1612:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("1-ON 2-OFF 0-RET");
    1616:	80 2f       	mov	r24, r16
    1618:	9d 2d       	mov	r25, r13
    161a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					while(1)
					{
						x=0xff;
						do
						{
							x=keypad_u8check_press();
    161e:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
						} while (x==0xff);
    1622:	8f 3f       	cpi	r24, 0xFF	; 255
    1624:	e1 f3       	breq	.-8      	; 0x161e <main+0xd16>
    1626:	2f e7       	ldi	r18, 0x7F	; 127
    1628:	39 ea       	ldi	r19, 0xA9	; 169
    162a:	43 e0       	ldi	r20, 0x03	; 3
    162c:	21 50       	subi	r18, 0x01	; 1
    162e:	30 40       	sbci	r19, 0x00	; 0
    1630:	40 40       	sbci	r20, 0x00	; 0
    1632:	e1 f7       	brne	.-8      	; 0x162c <main+0xd24>
    1634:	00 c0       	rjmp	.+0      	; 0x1636 <main+0xd2e>
    1636:	00 00       	nop
						_delay_ms(150);
						
						if (x=='0')
    1638:	80 33       	cpi	r24, 0x30	; 48
    163a:	19 f4       	brne	.+6      	; 0x1642 <main+0xd3a>
						{
							send=SPI_MasterTransmitchar(x);
    163c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							break;
    1640:	7f cf       	rjmp	.-258    	; 0x1540 <main+0xc38>
						}
						else if (x=='1')
    1642:	81 33       	cpi	r24, 0x31	; 49
    1644:	19 f4       	brne	.+6      	; 0x164c <main+0xd44>
						{
							send=SPI_MasterTransmitchar(x);
    1646:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							
							break;
    164a:	7a cf       	rjmp	.-268    	; 0x1540 <main+0xc38>
						}
						else if (x=='2')
    164c:	82 33       	cpi	r24, 0x32	; 50
    164e:	39 f7       	brne	.-50     	; 0x161e <main+0xd16>
						{
							send=SPI_MasterTransmitchar(x);
    1650:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							
							break;
    1654:	75 cf       	rjmp	.-278    	; 0x1540 <main+0xc38>
					}
					goto More;
				}//end if room4
				
				/**************** TV select ******************/
				if (x=='6')
    1656:	16 33       	cpi	r17, 0x36	; 54
    1658:	09 f0       	breq	.+2      	; 0x165c <main+0xd54>
    165a:	43 c0       	rjmp	.+134    	; 0x16e2 <main+0xdda>
				{
					send=6;
					recive=SPI_MasterTransmitchar(send);
    165c:	86 e0       	ldi	r24, 0x06	; 6
    165e:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
					LCD_vSend_string("TV :S");
    1662:	83 ec       	ldi	r24, 0xC3	; 195
    1664:	91 e0       	ldi	r25, 0x01	; 1
    1666:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					/******* TV status****/
					recive=SPI_MasterTransmitchar(send);
    166a:	86 e0       	ldi	r24, 0x06	; 6
    166c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
					if (recive == 'T')
    1670:	84 35       	cpi	r24, 0x54	; 84
    1672:	49 f4       	brne	.+18     	; 0x1686 <main+0xd7e>
					{
						LCD_movecursor(1,7);
    1674:	81 e0       	ldi	r24, 0x01	; 1
    1676:	67 e0       	ldi	r22, 0x07	; 7
    1678:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_string("ON ");
    167c:	89 ec       	ldi	r24, 0xC9	; 201
    167e:	91 e0       	ldi	r25, 0x01	; 1
    1680:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1684:	0a c0       	rjmp	.+20     	; 0x169a <main+0xd92>
					}
					else if (recive == 'F')
    1686:	86 34       	cpi	r24, 0x46	; 70
    1688:	41 f4       	brne	.+16     	; 0x169a <main+0xd92>
					{
						LCD_movecursor(1,7);
    168a:	81 e0       	ldi	r24, 0x01	; 1
    168c:	67 e0       	ldi	r22, 0x07	; 7
    168e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
						LCD_vSend_string("OFF");
    1692:	84 e6       	ldi	r24, 0x64	; 100
    1694:	91 e0       	ldi	r25, 0x01	; 1
    1696:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					}
					LCD_movecursor(2,1);
    169a:	82 e0       	ldi	r24, 0x02	; 2
    169c:	61 e0       	ldi	r22, 0x01	; 1
    169e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("1-ON 2-OFF 0-RET");
    16a2:	80 2f       	mov	r24, r16
    16a4:	9d 2d       	mov	r25, r13
    16a6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					while(1)
					{
						x=0xff;
						do
						{
							x=keypad_u8check_press();
    16aa:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
						} while (x==0xff);
    16ae:	8f 3f       	cpi	r24, 0xFF	; 255
    16b0:	e1 f3       	breq	.-8      	; 0x16aa <main+0xda2>
    16b2:	2f e7       	ldi	r18, 0x7F	; 127
    16b4:	39 ea       	ldi	r19, 0xA9	; 169
    16b6:	43 e0       	ldi	r20, 0x03	; 3
    16b8:	21 50       	subi	r18, 0x01	; 1
    16ba:	30 40       	sbci	r19, 0x00	; 0
    16bc:	40 40       	sbci	r20, 0x00	; 0
    16be:	e1 f7       	brne	.-8      	; 0x16b8 <main+0xdb0>
    16c0:	00 c0       	rjmp	.+0      	; 0x16c2 <main+0xdba>
    16c2:	00 00       	nop
						_delay_ms(150);
						
						if (x=='0')
    16c4:	80 33       	cpi	r24, 0x30	; 48
    16c6:	19 f4       	brne	.+6      	; 0x16ce <main+0xdc6>
						{
							send=SPI_MasterTransmitchar(x);
    16c8:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							break;
    16cc:	39 cf       	rjmp	.-398    	; 0x1540 <main+0xc38>
						}
						else if (x=='1')
    16ce:	81 33       	cpi	r24, 0x31	; 49
    16d0:	19 f4       	brne	.+6      	; 0x16d8 <main+0xdd0>
						{
							send=SPI_MasterTransmitchar(x);
    16d2:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							
							break;
    16d6:	34 cf       	rjmp	.-408    	; 0x1540 <main+0xc38>
						}
						else if (x=='2')
    16d8:	82 33       	cpi	r24, 0x32	; 50
    16da:	39 f7       	brne	.-50     	; 0x16aa <main+0xda2>
						{
							send=SPI_MasterTransmitchar(x);
    16dc:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							
							break;
    16e0:	2f cf       	rjmp	.-418    	; 0x1540 <main+0xc38>
						
					}
					goto More;
				}//end if tv
				/******************** AIR select ******************/
			if (x=='7')
    16e2:	17 33       	cpi	r17, 0x37	; 55
    16e4:	09 f0       	breq	.+2      	; 0x16e8 <main+0xde0>
    16e6:	c5 c0       	rjmp	.+394    	; 0x1872 <main+0xf6a>
				{
					
					send=7;
					recive=SPI_MasterTransmitchar(send);
    16e8:	87 e0       	ldi	r24, 0x07	; 7
    16ea:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
				AIR:
					LCD_clearscreen();
    16ee:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
					LCD_vSend_string("1:set Air Temp");
    16f2:	c4 01       	movw	r24, r8
    16f4:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
					LCD_movecursor(2,1);
    16f8:	82 e0       	ldi	r24, 0x02	; 2
    16fa:	61 e0       	ldi	r22, 0x01	; 1
    16fc:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
					LCD_vSend_string("2:Control 0:RET");
    1700:	c3 01       	movw	r24, r6
    1702:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
						x=0xff;
						do
						{
							x=keypad_u8check_press();
    1706:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
						} while (x==0xff);
    170a:	8f 3f       	cpi	r24, 0xFF	; 255
    170c:	e1 f3       	breq	.-8      	; 0x1706 <main+0xdfe>
    170e:	2f e7       	ldi	r18, 0x7F	; 127
    1710:	39 ea       	ldi	r19, 0xA9	; 169
    1712:	43 e0       	ldi	r20, 0x03	; 3
    1714:	21 50       	subi	r18, 0x01	; 1
    1716:	30 40       	sbci	r19, 0x00	; 0
    1718:	40 40       	sbci	r20, 0x00	; 0
    171a:	e1 f7       	brne	.-8      	; 0x1714 <main+0xe0c>
    171c:	00 c0       	rjmp	.+0      	; 0x171e <main+0xe16>
    171e:	00 00       	nop
						_delay_ms(150);
						/****** ret ********************/
						if (x=='0')
    1720:	80 33       	cpi	r24, 0x30	; 48
    1722:	19 f4       	brne	.+6      	; 0x172a <main+0xe22>
						{
							send='0';
							recive=SPI_MasterTransmitchar(send);
    1724:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							goto More;
    1728:	0b cf       	rjmp	.-490    	; 0x1540 <main+0xc38>
						}
						/****** set temp **********************/
						if (x=='1')//set temp
    172a:	81 33       	cpi	r24, 0x31	; 49
    172c:	09 f0       	breq	.+2      	; 0x1730 <main+0xe28>
    172e:	5b c0       	rjmp	.+182    	; 0x17e6 <main+0xede>
						{
							send='1';
							recive=SPI_MasterTransmitchar(send);
    1730:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							LCD_clearscreen();
    1734:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
							LCD_vSend_string("Temperature= --");
    1738:	8c ee       	ldi	r24, 0xEC	; 236
    173a:	91 e0       	ldi	r25, 0x01	; 1
    173c:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
							//scan first digit
							x=0xff;
							do
							{
								x=keypad_u8check_press();
    1740:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
							} while (x==0xff);
    1744:	8f 3f       	cpi	r24, 0xFF	; 255
    1746:	e1 f3       	breq	.-8      	; 0x1740 <main+0xe38>
    1748:	18 2f       	mov	r17, r24
    174a:	8f e7       	ldi	r24, 0x7F	; 127
    174c:	9a e1       	ldi	r25, 0x1A	; 26
    174e:	a6 e0       	ldi	r26, 0x06	; 6
    1750:	81 50       	subi	r24, 0x01	; 1
    1752:	90 40       	sbci	r25, 0x00	; 0
    1754:	a0 40       	sbci	r26, 0x00	; 0
    1756:	e1 f7       	brne	.-8      	; 0x1750 <main+0xe48>
    1758:	00 c0       	rjmp	.+0      	; 0x175a <main+0xe52>
    175a:	00 00       	nop
							_delay_ms(250);
							temp_1digit=x-48;
    175c:	0f 2e       	mov	r0, r31
    175e:	f0 ed       	ldi	r31, 0xD0	; 208
    1760:	cf 2e       	mov	r12, r31
    1762:	f0 2d       	mov	r31, r0
    1764:	c1 0e       	add	r12, r17
							LCD_movecursor(1,14);
    1766:	81 e0       	ldi	r24, 0x01	; 1
    1768:	6e e0       	ldi	r22, 0x0E	; 14
    176a:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
							LCD_vSend_char(x);
    176e:	81 2f       	mov	r24, r17
    1770:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
							
							//scan second digit
							x=0xff;
							do
							{
								x=keypad_u8check_press();
    1774:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
							} while (x==0xff);
    1778:	8f 3f       	cpi	r24, 0xFF	; 255
    177a:	e1 f3       	breq	.-8      	; 0x1774 <main+0xe6c>
    177c:	18 2f       	mov	r17, r24
    177e:	2f e7       	ldi	r18, 0x7F	; 127
    1780:	39 ea       	ldi	r19, 0xA9	; 169
    1782:	43 e0       	ldi	r20, 0x03	; 3
    1784:	21 50       	subi	r18, 0x01	; 1
    1786:	30 40       	sbci	r19, 0x00	; 0
    1788:	40 40       	sbci	r20, 0x00	; 0
    178a:	e1 f7       	brne	.-8      	; 0x1784 <main+0xe7c>
    178c:	00 c0       	rjmp	.+0      	; 0x178e <main+0xe86>
    178e:	00 00       	nop
							_delay_ms(150);
							temp_2digit=x-48;
							LCD_movecursor(1,15);
    1790:	81 e0       	ldi	r24, 0x01	; 1
    1792:	6f e0       	ldi	r22, 0x0F	; 15
    1794:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
							LCD_vSend_char(x);
    1798:	81 2f       	mov	r24, r17
    179a:	0e 94 29 04 	call	0x852	; 0x852 <LCD_vSend_char>
    179e:	8f ef       	ldi	r24, 0xFF	; 255
    17a0:	94 e3       	ldi	r25, 0x34	; 52
    17a2:	ac e0       	ldi	r26, 0x0C	; 12
    17a4:	81 50       	subi	r24, 0x01	; 1
    17a6:	90 40       	sbci	r25, 0x00	; 0
    17a8:	a0 40       	sbci	r26, 0x00	; 0
    17aa:	e1 f7       	brne	.-8      	; 0x17a4 <main+0xe9c>
    17ac:	00 c0       	rjmp	.+0      	; 0x17ae <main+0xea6>
    17ae:	00 00       	nop
							_delay_ms(500);
							temp_set= (temp_1digit*10)+temp_2digit;
    17b0:	cc 0c       	add	r12, r12
    17b2:	8c 2d       	mov	r24, r12
    17b4:	88 0f       	add	r24, r24
    17b6:	88 0f       	add	r24, r24
    17b8:	8c 0d       	add	r24, r12
							do
							{
								x=keypad_u8check_press();
							} while (x==0xff);
							_delay_ms(150);
							temp_2digit=x-48;
    17ba:	80 53       	subi	r24, 0x30	; 48
							LCD_vSend_char(x);
							_delay_ms(500);
							temp_set= (temp_1digit*10)+temp_2digit;
							
							send=temp_set;
							recive=SPI_MasterTransmitchar(send);
    17bc:	81 0f       	add	r24, r17
    17be:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							
							LCD_clearscreen();
    17c2:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
							LCD_vSend_string("Temp Set");
    17c6:	8c ef       	ldi	r24, 0xFC	; 252
    17c8:	91 e0       	ldi	r25, 0x01	; 1
    17ca:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    17ce:	2f ef       	ldi	r18, 0xFF	; 255
    17d0:	34 e3       	ldi	r19, 0x34	; 52
    17d2:	4c e0       	ldi	r20, 0x0C	; 12
    17d4:	21 50       	subi	r18, 0x01	; 1
    17d6:	30 40       	sbci	r19, 0x00	; 0
    17d8:	40 40       	sbci	r20, 0x00	; 0
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <main+0xecc>
    17dc:	00 c0       	rjmp	.+0      	; 0x17de <main+0xed6>
    17de:	00 00       	nop
							_delay_ms(500);
							LCD_clearscreen();
    17e0:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
							goto AIR;
    17e4:	84 cf       	rjmp	.-248    	; 0x16ee <main+0xde6>
						}//end if set temp
						
						/************ control ***********/
						if (x=='2')//control
    17e6:	82 33       	cpi	r24, 0x32	; 50
    17e8:	09 f0       	breq	.+2      	; 0x17ec <main+0xee4>
    17ea:	aa ce       	rjmp	.-684    	; 0x1540 <main+0xc38>
						{
							send='2';
							recive=SPI_MasterTransmitchar(send);
    17ec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							LCD_clearscreen();
    17f0:	0e 94 4a 04 	call	0x894	; 0x894 <LCD_clearscreen>
							LCD_vSend_string("AIR cond :S");
    17f4:	c5 01       	movw	r24, r10
    17f6:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
							/******* AIR status****/
							recive=SPI_MasterTransmitchar(send);
    17fa:	82 e3       	ldi	r24, 0x32	; 50
    17fc:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
							if (recive == 'T')
    1800:	84 35       	cpi	r24, 0x54	; 84
    1802:	49 f4       	brne	.+18     	; 0x1816 <main+0xf0e>
							{
								LCD_movecursor(1,13);
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	6d e0       	ldi	r22, 0x0D	; 13
    1808:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
								LCD_vSend_string("ON ");
    180c:	89 ec       	ldi	r24, 0xC9	; 201
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    1814:	0a c0       	rjmp	.+20     	; 0x182a <main+0xf22>
							}
							else if (recive == 'F')
    1816:	86 34       	cpi	r24, 0x46	; 70
    1818:	41 f4       	brne	.+16     	; 0x182a <main+0xf22>
							{
								LCD_movecursor(1,13);
    181a:	81 e0       	ldi	r24, 0x01	; 1
    181c:	6d e0       	ldi	r22, 0x0D	; 13
    181e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
								LCD_vSend_string("OFF");
    1822:	84 e6       	ldi	r24, 0x64	; 100
    1824:	91 e0       	ldi	r25, 0x01	; 1
    1826:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
							}
							LCD_movecursor(2,1);
    182a:	82 e0       	ldi	r24, 0x02	; 2
    182c:	61 e0       	ldi	r22, 0x01	; 1
    182e:	0e 94 54 04 	call	0x8a8	; 0x8a8 <LCD_movecursor>
							LCD_vSend_string("1-ON 2-OFF 0-RET");
    1832:	80 2f       	mov	r24, r16
    1834:	9d 2d       	mov	r25, r13
    1836:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
							while(1)
							{
								x=0xff;
								do
								{
									x=keypad_u8check_press();
    183a:	0e 94 3f 03 	call	0x67e	; 0x67e <keypad_u8check_press>
								} while (x==0xff);
    183e:	8f 3f       	cpi	r24, 0xFF	; 255
    1840:	e1 f3       	breq	.-8      	; 0x183a <main+0xf32>
    1842:	2f e7       	ldi	r18, 0x7F	; 127
    1844:	39 ea       	ldi	r19, 0xA9	; 169
    1846:	43 e0       	ldi	r20, 0x03	; 3
    1848:	21 50       	subi	r18, 0x01	; 1
    184a:	30 40       	sbci	r19, 0x00	; 0
    184c:	40 40       	sbci	r20, 0x00	; 0
    184e:	e1 f7       	brne	.-8      	; 0x1848 <main+0xf40>
    1850:	00 c0       	rjmp	.+0      	; 0x1852 <main+0xf4a>
    1852:	00 00       	nop
								_delay_ms(150);
								
								if (x=='0')
    1854:	80 33       	cpi	r24, 0x30	; 48
    1856:	19 f4       	brne	.+6      	; 0x185e <main+0xf56>
								{
									send=SPI_MasterTransmitchar(x);
    1858:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
									break;
    185c:	48 cf       	rjmp	.-368    	; 0x16ee <main+0xde6>
								}
								else if (x=='1')
    185e:	81 33       	cpi	r24, 0x31	; 49
    1860:	19 f4       	brne	.+6      	; 0x1868 <main+0xf60>
								{
									send=SPI_MasterTransmitchar(x);
    1862:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
									
									break;
    1866:	43 cf       	rjmp	.-378    	; 0x16ee <main+0xde6>
								}
								else if (x=='2')
    1868:	82 33       	cpi	r24, 0x32	; 50
    186a:	39 f7       	brne	.-50     	; 0x183a <main+0xf32>
								{
									send=SPI_MasterTransmitchar(x);
    186c:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
									
									break;
    1870:	3e cf       	rjmp	.-388    	; 0x16ee <main+0xde6>
						}//end if control
				
				goto More;
				}//end if air 

			else if (x!=0xff)
    1872:	1f 3f       	cpi	r17, 0xFF	; 255
    1874:	f1 f0       	breq	.+60     	; 0x18b2 <main+0xfaa>
			{
				LCD_vSend_string("wrong choice");
    1876:	88 e1       	ldi	r24, 0x18	; 24
    1878:	91 e0       	ldi	r25, 0x01	; 1
    187a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    187e:	8f e7       	ldi	r24, 0x7F	; 127
    1880:	9a e1       	ldi	r25, 0x1A	; 26
    1882:	a6 e0       	ldi	r26, 0x06	; 6
    1884:	81 50       	subi	r24, 0x01	; 1
    1886:	90 40       	sbci	r25, 0x00	; 0
    1888:	a0 40       	sbci	r26, 0x00	; 0
    188a:	e1 f7       	brne	.-8      	; 0x1884 <main+0xf7c>
    188c:	00 c0       	rjmp	.+0      	; 0x188e <main+0xf86>
    188e:	00 00       	nop
    1890:	57 ce       	rjmp	.-850    	; 0x1540 <main+0xc38>
				goto More;
			}

			}//end if more
				
		else if (x!=0xff)
    1892:	1f 3f       	cpi	r17, 0xFF	; 255
    1894:	71 f0       	breq	.+28     	; 0x18b2 <main+0xfaa>
		{
			LCD_vSend_string("wrong choice");
    1896:	88 e1       	ldi	r24, 0x18	; 24
    1898:	91 e0       	ldi	r25, 0x01	; 1
    189a:	0e 94 3b 04 	call	0x876	; 0x876 <LCD_vSend_string>
    189e:	2f e7       	ldi	r18, 0x7F	; 127
    18a0:	3a e1       	ldi	r19, 0x1A	; 26
    18a2:	46 e0       	ldi	r20, 0x06	; 6
    18a4:	21 50       	subi	r18, 0x01	; 1
    18a6:	30 40       	sbci	r19, 0x00	; 0
    18a8:	40 40       	sbci	r20, 0x00	; 0
    18aa:	e1 f7       	brne	.-8      	; 0x18a4 <main+0xf9c>
    18ac:	00 c0       	rjmp	.+0      	; 0x18ae <main+0xfa6>
    18ae:	00 00       	nop
    18b0:	2d cd       	rjmp	.-1446   	; 0x130c <main+0xa04>

	if (admin_mode==1)
		{
			count_time_flag=3;
			guest_mode =0;
			while(count_time_flag==3)
    18b2:	80 91 14 02 	lds	r24, 0x0214
    18b6:	90 91 15 02 	lds	r25, 0x0215
    18ba:	83 30       	cpi	r24, 0x03	; 3
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <main+0xfba>
    18c0:	1a cd       	rjmp	.-1484   	; 0x12f6 <main+0x9ee>
    18c2:	64 c8       	rjmp	.-3896   	; 0x98c <main+0x84>

000018c4 <__vector_10>:

}
}//main

ISR(TIMER0_COMP_vect)
{
    18c4:	1f 92       	push	r1
    18c6:	0f 92       	push	r0
    18c8:	0f b6       	in	r0, 0x3f	; 63
    18ca:	0f 92       	push	r0
    18cc:	11 24       	eor	r1, r1
    18ce:	2f 93       	push	r18
    18d0:	3f 93       	push	r19
    18d2:	4f 93       	push	r20
    18d4:	5f 93       	push	r21
    18d6:	6f 93       	push	r22
    18d8:	7f 93       	push	r23
    18da:	8f 93       	push	r24
    18dc:	9f 93       	push	r25
    18de:	af 93       	push	r26
    18e0:	bf 93       	push	r27
    18e2:	ef 93       	push	r30
    18e4:	ff 93       	push	r31
	count_time++;//for block time and guest time 
    18e6:	80 91 18 02 	lds	r24, 0x0218
    18ea:	90 91 19 02 	lds	r25, 0x0219
    18ee:	01 96       	adiw	r24, 0x01	; 1
    18f0:	90 93 19 02 	sts	0x0219, r25
    18f4:	80 93 18 02 	sts	0x0218, r24
	count_time_admin++;// for admin time
    18f8:	80 91 16 02 	lds	r24, 0x0216
    18fc:	90 91 17 02 	lds	r25, 0x0217
    1900:	01 96       	adiw	r24, 0x01	; 1
    1902:	90 93 17 02 	sts	0x0217, r25
    1906:	80 93 16 02 	sts	0x0216, r24
	
	if (count_time >= guest_time_max*100)
    190a:	80 91 18 02 	lds	r24, 0x0218
    190e:	90 91 19 02 	lds	r25, 0x0219
    1912:	21 e0       	ldi	r18, 0x01	; 1
    1914:	84 3f       	cpi	r24, 0xF4	; 244
    1916:	92 07       	cpc	r25, r18
    1918:	70 f0       	brcs	.+28     	; 0x1936 <__vector_10+0x72>
		{
			count_time=0;
    191a:	10 92 19 02 	sts	0x0219, r1
    191e:	10 92 18 02 	sts	0x0218, r1
			count_time_flag= guest_time_flag;
    1922:	88 e0       	ldi	r24, 0x08	; 8
    1924:	90 e0       	ldi	r25, 0x00	; 0
    1926:	90 93 15 02 	sts	0x0215, r25
    192a:	80 93 14 02 	sts	0x0214, r24
			LED_vTurnOff('C',guest_led);
    192e:	83 e4       	ldi	r24, 0x43	; 67
    1930:	61 e0       	ldi	r22, 0x01	; 1
    1932:	0e 94 7d 04 	call	0x8fa	; 0x8fa <LED_vTurnOff>
		}
	if (count_time_admin >= admin_time_max*100)
    1936:	80 91 16 02 	lds	r24, 0x0216
    193a:	90 91 17 02 	lds	r25, 0x0217
    193e:	25 e0       	ldi	r18, 0x05	; 5
    1940:	8c 3d       	cpi	r24, 0xDC	; 220
    1942:	92 07       	cpc	r25, r18
    1944:	50 f0       	brcs	.+20     	; 0x195a <__vector_10+0x96>
	{
	
	count_time_admin=0;
    1946:	10 92 17 02 	sts	0x0217, r1
    194a:	10 92 16 02 	sts	0x0216, r1
	count_time_flag=admin_time_flag;
    194e:	87 e0       	ldi	r24, 0x07	; 7
    1950:	90 e0       	ldi	r25, 0x00	; 0
    1952:	90 93 15 02 	sts	0x0215, r25
    1956:	80 93 14 02 	sts	0x0214, r24
	
	}
    195a:	ff 91       	pop	r31
    195c:	ef 91       	pop	r30
    195e:	bf 91       	pop	r27
    1960:	af 91       	pop	r26
    1962:	9f 91       	pop	r25
    1964:	8f 91       	pop	r24
    1966:	7f 91       	pop	r23
    1968:	6f 91       	pop	r22
    196a:	5f 91       	pop	r21
    196c:	4f 91       	pop	r20
    196e:	3f 91       	pop	r19
    1970:	2f 91       	pop	r18
    1972:	0f 90       	pop	r0
    1974:	0f be       	out	0x3f, r0	; 63
    1976:	0f 90       	pop	r0
    1978:	1f 90       	pop	r1
    197a:	18 95       	reti

0000197c <SPI_MasterInit>:
#include <util/delay.h>

void SPI_MasterInit(void)
{
	/*Set SS / MOSI / SCK  as output pins for master*/
	DIO_vsetPINDir('B',4,1);
    197c:	82 e4       	ldi	r24, 0x42	; 66
    197e:	64 e0       	ldi	r22, 0x04	; 4
    1980:	41 e0       	ldi	r20, 0x01	; 1
    1982:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',5,1);
    1986:	82 e4       	ldi	r24, 0x42	; 66
    1988:	65 e0       	ldi	r22, 0x05	; 5
    198a:	41 e0       	ldi	r20, 0x01	; 1
    198c:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	DIO_vsetPINDir('B',7,1);
    1990:	82 e4       	ldi	r24, 0x42	; 66
    1992:	67 e0       	ldi	r22, 0x07	; 7
    1994:	41 e0       	ldi	r20, 0x01	; 1
    1996:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
	/*Enable Master mode*/
	SET_BIT(SPCR,MSTR);
    199a:	6c 9a       	sbi	0x0d, 4	; 13
	/*Set clock to fosc/16*/
	SET_BIT(SPCR,SPR0);
    199c:	68 9a       	sbi	0x0d, 0	; 13
	/*Enable SPI*/
    SET_BIT(SPCR,SPE);
    199e:	6e 9a       	sbi	0x0d, 6	; 13
	/*set SS to high*/
	DIO_write('B',4,1);
    19a0:	82 e4       	ldi	r24, 0x42	; 66
    19a2:	64 e0       	ldi	r22, 0x04	; 4
    19a4:	41 e0       	ldi	r20, 0x01	; 1
    19a6:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
}
    19aa:	08 95       	ret

000019ac <SPI_SlaveInit>:

void SPI_SlaveInit(void)
{
	/*Enable SPI*/
	SET_BIT(SPCR,SPE);
    19ac:	6e 9a       	sbi	0x0d, 6	; 13
	/*Set MISO as output*/
	DIO_vsetPINDir('B',6,1);
    19ae:	82 e4       	ldi	r24, 0x42	; 66
    19b0:	66 e0       	ldi	r22, 0x06	; 6
    19b2:	41 e0       	ldi	r20, 0x01	; 1
    19b4:	0e 94 49 00 	call	0x92	; 0x92 <DIO_vsetPINDir>
}
    19b8:	08 95       	ret

000019ba <SPI_MasterTransmitchar>:

unsigned char SPI_MasterTransmitchar(unsigned char Data)
{
    19ba:	cf 93       	push	r28
    19bc:	c8 2f       	mov	r28, r24
	/*Clear SS to send data to slave*/
	DIO_write('B',4,0);
    19be:	82 e4       	ldi	r24, 0x42	; 66
    19c0:	64 e0       	ldi	r22, 0x04	; 4
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	0e 94 cc 00 	call	0x198	; 0x198 <DIO_write>
	/*Put data on SPDR*/
	SPDR=Data;
    19c8:	cf b9       	out	0x0f, r28	; 15
	/*Wait until the transmission is finished*/
     while(READ_BIT(SPSR,SPIF)==0);	
    19ca:	77 9b       	sbis	0x0e, 7	; 14
    19cc:	fe cf       	rjmp	.-4      	; 0x19ca <SPI_MasterTransmitchar+0x10>
	 /*read SPDR*/
	 return SPDR ;
    19ce:	8f b1       	in	r24, 0x0f	; 15
}
    19d0:	cf 91       	pop	r28
    19d2:	08 95       	ret

000019d4 <SPI_SlaveReceivechar>:

unsigned char SPI_SlaveReceivechar(unsigned char Data)
{
	/*Put data on SPDR*/
	SPDR=Data;
    19d4:	8f b9       	out	0x0f, r24	; 15
	/*Wait until data is received in SPI register*/
	while(READ_BIT(SPSR,SPIF)==0);
    19d6:	77 9b       	sbis	0x0e, 7	; 14
    19d8:	fe cf       	rjmp	.-4      	; 0x19d6 <SPI_SlaveReceivechar+0x2>
	/*read the received data*/
	return SPDR ;
    19da:	8f b1       	in	r24, 0x0f	; 15
}
    19dc:	08 95       	ret

000019de <SPI_MasterTransmitstring>:

void SPI_MasterTransmitstring(unsigned char *ptr)
{
    19de:	cf 93       	push	r28
    19e0:	df 93       	push	r29
    19e2:	ec 01       	movw	r28, r24
	while((*ptr)!=0)
    19e4:	88 81       	ld	r24, Y
    19e6:	88 23       	and	r24, r24
    19e8:	79 f0       	breq	.+30     	; 0x1a08 <SPI_MasterTransmitstring+0x2a>
	while(READ_BIT(SPSR,SPIF)==0);
	/*read the received data*/
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
    19ea:	21 96       	adiw	r28, 0x01	; 1
{
	while((*ptr)!=0)
	{
		SPI_MasterTransmitchar(*ptr);
    19ec:	0e 94 dd 0c 	call	0x19ba	; 0x19ba <SPI_MasterTransmitchar>
    19f0:	8f ef       	ldi	r24, 0xFF	; 255
    19f2:	92 e5       	ldi	r25, 0x52	; 82
    19f4:	a7 e0       	ldi	r26, 0x07	; 7
    19f6:	81 50       	subi	r24, 0x01	; 1
    19f8:	90 40       	sbci	r25, 0x00	; 0
    19fa:	a0 40       	sbci	r26, 0x00	; 0
    19fc:	e1 f7       	brne	.-8      	; 0x19f6 <SPI_MasterTransmitstring+0x18>
    19fe:	00 c0       	rjmp	.+0      	; 0x1a00 <SPI_MasterTransmitstring+0x22>
    1a00:	00 00       	nop
	return SPDR ;
}

void SPI_MasterTransmitstring(unsigned char *ptr)
{
	while((*ptr)!=0)
    1a02:	89 91       	ld	r24, Y+
    1a04:	88 23       	and	r24, r24
    1a06:	91 f7       	brne	.-28     	; 0x19ec <SPI_MasterTransmitstring+0xe>
	{
		SPI_MasterTransmitchar(*ptr);
		_delay_ms(300);
		ptr++;
	}
}
    1a08:	df 91       	pop	r29
    1a0a:	cf 91       	pop	r28
    1a0c:	08 95       	ret

00001a0e <timer_CTC_init_interrupt>:
#include <avr/io.h>
#include <avr/interrupt.h>
void timer_CTC_init_interrupt(void)
{
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    1a0e:	83 b7       	in	r24, 0x33	; 51
    1a10:	88 60       	ori	r24, 0x08	; 8
    1a12:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=80;
    1a14:	80 e5       	ldi	r24, 0x50	; 80
    1a16:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */	
	SET_BIT(TCCR0,CS00);
    1a18:	83 b7       	in	r24, 0x33	; 51
    1a1a:	81 60       	ori	r24, 0x01	; 1
    1a1c:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1a1e:	83 b7       	in	r24, 0x33	; 51
    1a20:	84 60       	ori	r24, 0x04	; 4
    1a22:	83 bf       	out	0x33, r24	; 51
	/* enable interrupt*/
	sei();
    1a24:	78 94       	sei
	SET_BIT(TIMSK,OCIE0);
    1a26:	89 b7       	in	r24, 0x39	; 57
    1a28:	82 60       	ori	r24, 0x02	; 2
    1a2a:	89 bf       	out	0x39, r24	; 57
}
    1a2c:	08 95       	ret

00001a2e <timer_wave_nonPWM>:


void timer_wave_nonPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1a2e:	bb 9a       	sbi	0x17, 3	; 23
	/* select CTC mode*/
	SET_BIT(TCCR0,WGM01);
    1a30:	83 b7       	in	r24, 0x33	; 51
    1a32:	88 60       	ori	r24, 0x08	; 8
    1a34:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1a36:	80 e4       	ldi	r24, 0x40	; 64
    1a38:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1a3a:	83 b7       	in	r24, 0x33	; 51
    1a3c:	81 60       	ori	r24, 0x01	; 1
    1a3e:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1a40:	83 b7       	in	r24, 0x33	; 51
    1a42:	84 60       	ori	r24, 0x04	; 4
    1a44:	83 bf       	out	0x33, r24	; 51
	/* toggle OC0 on compare match*/
	SET_BIT(TCCR0,COM00);
    1a46:	83 b7       	in	r24, 0x33	; 51
    1a48:	80 61       	ori	r24, 0x10	; 16
    1a4a:	83 bf       	out	0x33, r24	; 51
}
    1a4c:	08 95       	ret

00001a4e <timer_wave_fastPWM>:

void timer_wave_fastPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1a4e:	bb 9a       	sbi	0x17, 3	; 23
	/* select fast PWM mode*/
	SET_BIT(TCCR0,WGM00);
    1a50:	83 b7       	in	r24, 0x33	; 51
    1a52:	80 64       	ori	r24, 0x40	; 64
    1a54:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,WGM01);
    1a56:	83 b7       	in	r24, 0x33	; 51
    1a58:	88 60       	ori	r24, 0x08	; 8
    1a5a:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1a5c:	80 e4       	ldi	r24, 0x40	; 64
    1a5e:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1a60:	83 b7       	in	r24, 0x33	; 51
    1a62:	81 60       	ori	r24, 0x01	; 1
    1a64:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1a66:	83 b7       	in	r24, 0x33	; 51
    1a68:	84 60       	ori	r24, 0x04	; 4
    1a6a:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match, clear OC0 at BOTTOM,(inverting mode)*/
	SET_BIT(TCCR0,COM00);
    1a6c:	83 b7       	in	r24, 0x33	; 51
    1a6e:	80 61       	ori	r24, 0x10	; 16
    1a70:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1a72:	83 b7       	in	r24, 0x33	; 51
    1a74:	80 62       	ori	r24, 0x20	; 32
    1a76:	83 bf       	out	0x33, r24	; 51
}
    1a78:	08 95       	ret

00001a7a <timer_wave_phasecorrectPWM>:


void timer_wave_phasecorrectPWM(void)
{
	/* set OC0 as output pin */
	SET_BIT(DDRB,3);
    1a7a:	bb 9a       	sbi	0x17, 3	; 23
	/* select phase correct PWM mode*/
	SET_BIT(TCCR0,WGM00);
    1a7c:	83 b7       	in	r24, 0x33	; 51
    1a7e:	80 64       	ori	r24, 0x40	; 64
    1a80:	83 bf       	out	0x33, r24	; 51
	/* load a value in OCR0 */
	OCR0=64;
    1a82:	80 e4       	ldi	r24, 0x40	; 64
    1a84:	8c bf       	out	0x3c, r24	; 60
	/* select timer clock */
	SET_BIT(TCCR0,CS00);
    1a86:	83 b7       	in	r24, 0x33	; 51
    1a88:	81 60       	ori	r24, 0x01	; 1
    1a8a:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,CS02);
    1a8c:	83 b7       	in	r24, 0x33	; 51
    1a8e:	84 60       	ori	r24, 0x04	; 4
    1a90:	83 bf       	out	0x33, r24	; 51
	/* Set OC0 on compare match when up-counting. Clear OC0 on compare match when down counting.*/
	SET_BIT(TCCR0,COM00);
    1a92:	83 b7       	in	r24, 0x33	; 51
    1a94:	80 61       	ori	r24, 0x10	; 16
    1a96:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0,COM01);
    1a98:	83 b7       	in	r24, 0x33	; 51
    1a9a:	80 62       	ori	r24, 0x20	; 32
    1a9c:	83 bf       	out	0x33, r24	; 51
}
    1a9e:	08 95       	ret

00001aa0 <__divmodqi4>:
    1aa0:	87 fb       	bst	r24, 7
    1aa2:	08 2e       	mov	r0, r24
    1aa4:	06 26       	eor	r0, r22
    1aa6:	87 fd       	sbrc	r24, 7
    1aa8:	81 95       	neg	r24
    1aaa:	67 fd       	sbrc	r22, 7
    1aac:	61 95       	neg	r22
    1aae:	05 d0       	rcall	.+10     	; 0x1aba <__udivmodqi4>
    1ab0:	0e f4       	brtc	.+2      	; 0x1ab4 <__divmodqi4_1>
    1ab2:	91 95       	neg	r25

00001ab4 <__divmodqi4_1>:
    1ab4:	07 fc       	sbrc	r0, 7
    1ab6:	81 95       	neg	r24

00001ab8 <__divmodqi4_exit>:
    1ab8:	08 95       	ret

00001aba <__udivmodqi4>:
    1aba:	99 1b       	sub	r25, r25
    1abc:	79 e0       	ldi	r23, 0x09	; 9
    1abe:	04 c0       	rjmp	.+8      	; 0x1ac8 <__udivmodqi4_ep>

00001ac0 <__udivmodqi4_loop>:
    1ac0:	99 1f       	adc	r25, r25
    1ac2:	96 17       	cp	r25, r22
    1ac4:	08 f0       	brcs	.+2      	; 0x1ac8 <__udivmodqi4_ep>
    1ac6:	96 1b       	sub	r25, r22

00001ac8 <__udivmodqi4_ep>:
    1ac8:	88 1f       	adc	r24, r24
    1aca:	7a 95       	dec	r23
    1acc:	c9 f7       	brne	.-14     	; 0x1ac0 <__udivmodqi4_loop>
    1ace:	80 95       	com	r24
    1ad0:	08 95       	ret

00001ad2 <_exit>:
    1ad2:	f8 94       	cli

00001ad4 <__stop_program>:
    1ad4:	ff cf       	rjmp	.-2      	; 0x1ad4 <__stop_program>
